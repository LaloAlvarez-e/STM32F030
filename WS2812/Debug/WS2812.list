
WS2812.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003074  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032ac  080032ac  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  080032ac  080032ac  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032ac  080032ac  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032ac  080032ac  000132ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032b0  080032b0  000132b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080032b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000009c  08003350  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003350  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2e8  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3e  00000000  00000000  0002a3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0002bdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  0002c960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000109d1  00000000  00000000  0002d3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6c9  00000000  00000000  0003ddc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006312f  00000000  00000000  0004a492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ad5c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003328  00000000  00000000  000ad614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000009c 	.word	0x2000009c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800311c 	.word	0x0800311c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a0 	.word	0x200000a0
 8000104:	0800311c 	.word	0x0800311c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_lmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	46ce      	mov	lr, r9
 8000238:	4647      	mov	r7, r8
 800023a:	b580      	push	{r7, lr}
 800023c:	0007      	movs	r7, r0
 800023e:	4699      	mov	r9, r3
 8000240:	0c3b      	lsrs	r3, r7, #16
 8000242:	469c      	mov	ip, r3
 8000244:	0413      	lsls	r3, r2, #16
 8000246:	0c1b      	lsrs	r3, r3, #16
 8000248:	001d      	movs	r5, r3
 800024a:	000e      	movs	r6, r1
 800024c:	4661      	mov	r1, ip
 800024e:	0400      	lsls	r0, r0, #16
 8000250:	0c14      	lsrs	r4, r2, #16
 8000252:	0c00      	lsrs	r0, r0, #16
 8000254:	4345      	muls	r5, r0
 8000256:	434b      	muls	r3, r1
 8000258:	4360      	muls	r0, r4
 800025a:	4361      	muls	r1, r4
 800025c:	18c0      	adds	r0, r0, r3
 800025e:	0c2c      	lsrs	r4, r5, #16
 8000260:	1820      	adds	r0, r4, r0
 8000262:	468c      	mov	ip, r1
 8000264:	4283      	cmp	r3, r0
 8000266:	d903      	bls.n	8000270 <__aeabi_lmul+0x3c>
 8000268:	2380      	movs	r3, #128	; 0x80
 800026a:	025b      	lsls	r3, r3, #9
 800026c:	4698      	mov	r8, r3
 800026e:	44c4      	add	ip, r8
 8000270:	4649      	mov	r1, r9
 8000272:	4379      	muls	r1, r7
 8000274:	4372      	muls	r2, r6
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	4463      	add	r3, ip
 800027a:	042d      	lsls	r5, r5, #16
 800027c:	0c2d      	lsrs	r5, r5, #16
 800027e:	18c9      	adds	r1, r1, r3
 8000280:	0400      	lsls	r0, r0, #16
 8000282:	1940      	adds	r0, r0, r5
 8000284:	1889      	adds	r1, r1, r2
 8000286:	bcc0      	pop	{r6, r7}
 8000288:	46b9      	mov	r9, r7
 800028a:	46b0      	mov	r8, r6
 800028c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800028e:	46c0      	nop			; (mov r8, r8)

08000290 <WritePixel>:
void WritePixel(uint8_t Red, uint8_t Green, uint8_t Blue);
void WritePixelColor(uint32_t Color);


void WritePixel(uint8_t Red, uint8_t Green, uint8_t Blue)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	0004      	movs	r4, r0
 8000298:	0008      	movs	r0, r1
 800029a:	0011      	movs	r1, r2
 800029c:	1dfb      	adds	r3, r7, #7
 800029e:	1c22      	adds	r2, r4, #0
 80002a0:	701a      	strb	r2, [r3, #0]
 80002a2:	1dbb      	adds	r3, r7, #6
 80002a4:	1c02      	adds	r2, r0, #0
 80002a6:	701a      	strb	r2, [r3, #0]
 80002a8:	1d7b      	adds	r3, r7, #5
 80002aa:	1c0a      	adds	r2, r1, #0
 80002ac:	701a      	strb	r2, [r3, #0]
    uint8_t u8Temp;

    for(int i=0; i<8; i++)
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]
 80002b2:	e024      	b.n	80002fe <WritePixel+0x6e>
    {
        u8Temp = Green & 0x80;
 80002b4:	200b      	movs	r0, #11
 80002b6:	183b      	adds	r3, r7, r0
 80002b8:	1dba      	adds	r2, r7, #6
 80002ba:	7812      	ldrb	r2, [r2, #0]
 80002bc:	217f      	movs	r1, #127	; 0x7f
 80002be:	438a      	bics	r2, r1
 80002c0:	701a      	strb	r2, [r3, #0]
        Green <<= 1;
 80002c2:	1dba      	adds	r2, r7, #6
 80002c4:	1dbb      	adds	r3, r7, #6
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	18db      	adds	r3, r3, r3
 80002ca:	7013      	strb	r3, [r2, #0]
        u8Temp >>=7;
 80002cc:	183b      	adds	r3, r7, r0
 80002ce:	183a      	adds	r2, r7, r0
 80002d0:	7812      	ldrb	r2, [r2, #0]
 80002d2:	09d2      	lsrs	r2, r2, #7
 80002d4:	701a      	strb	r2, [r3, #0]
        SPI1->DR = u16ValueLed[u8Temp];
 80002d6:	183b      	adds	r3, r7, r0
 80002d8:	781a      	ldrb	r2, [r3, #0]
 80002da:	4b38      	ldr	r3, [pc, #224]	; (80003bc <WritePixel+0x12c>)
 80002dc:	0052      	lsls	r2, r2, #1
 80002de:	5ad2      	ldrh	r2, [r2, r3]
 80002e0:	4b37      	ldr	r3, [pc, #220]	; (80003c0 <WritePixel+0x130>)
 80002e2:	60da      	str	r2, [r3, #12]
        while((SPI1->SR & SPI_SR_FTLVL) == SPI_SR_FTLVL);
 80002e4:	46c0      	nop			; (mov r8, r8)
 80002e6:	4b36      	ldr	r3, [pc, #216]	; (80003c0 <WritePixel+0x130>)
 80002e8:	689a      	ldr	r2, [r3, #8]
 80002ea:	23c0      	movs	r3, #192	; 0xc0
 80002ec:	015b      	lsls	r3, r3, #5
 80002ee:	401a      	ands	r2, r3
 80002f0:	23c0      	movs	r3, #192	; 0xc0
 80002f2:	015b      	lsls	r3, r3, #5
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d0f6      	beq.n	80002e6 <WritePixel+0x56>
    for(int i=0; i<8; i++)
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	3301      	adds	r3, #1
 80002fc:	617b      	str	r3, [r7, #20]
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	2b07      	cmp	r3, #7
 8000302:	ddd7      	ble.n	80002b4 <WritePixel+0x24>
    }

    for(int i=0; i<8; i++)
 8000304:	2300      	movs	r3, #0
 8000306:	613b      	str	r3, [r7, #16]
 8000308:	e024      	b.n	8000354 <WritePixel+0xc4>
    {
        u8Temp = Red & 0x80;
 800030a:	200b      	movs	r0, #11
 800030c:	183b      	adds	r3, r7, r0
 800030e:	1dfa      	adds	r2, r7, #7
 8000310:	7812      	ldrb	r2, [r2, #0]
 8000312:	217f      	movs	r1, #127	; 0x7f
 8000314:	438a      	bics	r2, r1
 8000316:	701a      	strb	r2, [r3, #0]
        Red <<= 1;
 8000318:	1dfa      	adds	r2, r7, #7
 800031a:	1dfb      	adds	r3, r7, #7
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	18db      	adds	r3, r3, r3
 8000320:	7013      	strb	r3, [r2, #0]
        u8Temp >>=7;
 8000322:	183b      	adds	r3, r7, r0
 8000324:	183a      	adds	r2, r7, r0
 8000326:	7812      	ldrb	r2, [r2, #0]
 8000328:	09d2      	lsrs	r2, r2, #7
 800032a:	701a      	strb	r2, [r3, #0]
        SPI1->DR = u16ValueLed[u8Temp];
 800032c:	183b      	adds	r3, r7, r0
 800032e:	781a      	ldrb	r2, [r3, #0]
 8000330:	4b22      	ldr	r3, [pc, #136]	; (80003bc <WritePixel+0x12c>)
 8000332:	0052      	lsls	r2, r2, #1
 8000334:	5ad2      	ldrh	r2, [r2, r3]
 8000336:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <WritePixel+0x130>)
 8000338:	60da      	str	r2, [r3, #12]
        while((SPI1->SR & SPI_SR_FTLVL) == SPI_SR_FTLVL);
 800033a:	46c0      	nop			; (mov r8, r8)
 800033c:	4b20      	ldr	r3, [pc, #128]	; (80003c0 <WritePixel+0x130>)
 800033e:	689a      	ldr	r2, [r3, #8]
 8000340:	23c0      	movs	r3, #192	; 0xc0
 8000342:	015b      	lsls	r3, r3, #5
 8000344:	401a      	ands	r2, r3
 8000346:	23c0      	movs	r3, #192	; 0xc0
 8000348:	015b      	lsls	r3, r3, #5
 800034a:	429a      	cmp	r2, r3
 800034c:	d0f6      	beq.n	800033c <WritePixel+0xac>
    for(int i=0; i<8; i++)
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	3301      	adds	r3, #1
 8000352:	613b      	str	r3, [r7, #16]
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	2b07      	cmp	r3, #7
 8000358:	ddd7      	ble.n	800030a <WritePixel+0x7a>
    }

    for(int i=0; i<8; i++)
 800035a:	2300      	movs	r3, #0
 800035c:	60fb      	str	r3, [r7, #12]
 800035e:	e024      	b.n	80003aa <WritePixel+0x11a>
    {
        u8Temp = Blue & 0x80;
 8000360:	200b      	movs	r0, #11
 8000362:	183b      	adds	r3, r7, r0
 8000364:	1d7a      	adds	r2, r7, #5
 8000366:	7812      	ldrb	r2, [r2, #0]
 8000368:	217f      	movs	r1, #127	; 0x7f
 800036a:	438a      	bics	r2, r1
 800036c:	701a      	strb	r2, [r3, #0]
        Blue <<= 1;
 800036e:	1d7a      	adds	r2, r7, #5
 8000370:	1d7b      	adds	r3, r7, #5
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	18db      	adds	r3, r3, r3
 8000376:	7013      	strb	r3, [r2, #0]
        u8Temp >>=7;
 8000378:	183b      	adds	r3, r7, r0
 800037a:	183a      	adds	r2, r7, r0
 800037c:	7812      	ldrb	r2, [r2, #0]
 800037e:	09d2      	lsrs	r2, r2, #7
 8000380:	701a      	strb	r2, [r3, #0]
        SPI1->DR = u16ValueLed[u8Temp];
 8000382:	183b      	adds	r3, r7, r0
 8000384:	781a      	ldrb	r2, [r3, #0]
 8000386:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <WritePixel+0x12c>)
 8000388:	0052      	lsls	r2, r2, #1
 800038a:	5ad2      	ldrh	r2, [r2, r3]
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <WritePixel+0x130>)
 800038e:	60da      	str	r2, [r3, #12]
        while((SPI1->SR & SPI_SR_FTLVL) == SPI_SR_FTLVL);
 8000390:	46c0      	nop			; (mov r8, r8)
 8000392:	4b0b      	ldr	r3, [pc, #44]	; (80003c0 <WritePixel+0x130>)
 8000394:	689a      	ldr	r2, [r3, #8]
 8000396:	23c0      	movs	r3, #192	; 0xc0
 8000398:	015b      	lsls	r3, r3, #5
 800039a:	401a      	ands	r2, r3
 800039c:	23c0      	movs	r3, #192	; 0xc0
 800039e:	015b      	lsls	r3, r3, #5
 80003a0:	429a      	cmp	r2, r3
 80003a2:	d0f6      	beq.n	8000392 <WritePixel+0x102>
    for(int i=0; i<8; i++)
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	3301      	adds	r3, #1
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	2b07      	cmp	r3, #7
 80003ae:	ddd7      	ble.n	8000360 <WritePixel+0xd0>
    }
}
 80003b0:	46c0      	nop			; (mov r8, r8)
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46bd      	mov	sp, r7
 80003b6:	b007      	add	sp, #28
 80003b8:	bd90      	pop	{r4, r7, pc}
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	20000000 	.word	0x20000000
 80003c0:	40013000 	.word	0x40013000

080003c4 <WritePixelColor>:


void WritePixelColor(uint32_t Color)
{
 80003c4:	b590      	push	{r4, r7, lr}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
    uint8_t Green;
    uint8_t Red;
    uint8_t Blue;
    uint8_t u8Temp;

    Blue = Color & 0xFF;
 80003cc:	210f      	movs	r1, #15
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	701a      	strb	r2, [r3, #0]
    Color >>= 8;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	0a1b      	lsrs	r3, r3, #8
 80003d8:	607b      	str	r3, [r7, #4]
    Green = Color & 0xFF;
 80003da:	200e      	movs	r0, #14
 80003dc:	183b      	adds	r3, r7, r0
 80003de:	687a      	ldr	r2, [r7, #4]
 80003e0:	701a      	strb	r2, [r3, #0]
    Color >>= 8;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	0a1b      	lsrs	r3, r3, #8
 80003e6:	607b      	str	r3, [r7, #4]
    Red = Color & 0xFF;
 80003e8:	240d      	movs	r4, #13
 80003ea:	193b      	adds	r3, r7, r4
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	701a      	strb	r2, [r3, #0]
    WritePixel(Red, Green, Blue);
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	781a      	ldrb	r2, [r3, #0]
 80003f4:	183b      	adds	r3, r7, r0
 80003f6:	7819      	ldrb	r1, [r3, #0]
 80003f8:	193b      	adds	r3, r7, r4
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	0018      	movs	r0, r3
 80003fe:	f7ff ff47 	bl	8000290 <WritePixel>

}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b005      	add	sp, #20
 8000408:	bd90      	pop	{r4, r7, pc}
	...

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b090      	sub	sp, #64	; 0x40
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t Red = 0;
 8000412:	2300      	movs	r3, #0
 8000414:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t Green = 0xFF;
 8000416:	23ff      	movs	r3, #255	; 0xff
 8000418:	623b      	str	r3, [r7, #32]
	uint32_t Blue = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	61fb      	str	r3, [r7, #28]
	uint32_t RedDir = 0;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
	uint32_t GreenDir = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
	uint32_t BlueDir = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	613b      	str	r3, [r7, #16]
	uint32_t Color;
	uint32_t u32Count = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t u32Sub = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]
	uint32_t u32Delay = 0;
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
	uint32_t u32Intensidad = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 fba3 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f919 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000442:	f000 f9c9 	bl	80007d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000446:	f000 f95f 	bl	8000708 <MX_SPI1_Init>
  MX_TIM17_Init();
 800044a:	f000 f99b 	bl	8000784 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  SPI1->CR1 |= SPI_CR1_SPE;
 800044e:	4b83      	ldr	r3, [pc, #524]	; (800065c <main+0x250>)
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	4b82      	ldr	r3, [pc, #520]	; (800065c <main+0x250>)
 8000454:	2140      	movs	r1, #64	; 0x40
 8000456:	430a      	orrs	r2, r1
 8000458:	601a      	str	r2, [r3, #0]

  srand(SysTick->VAL);
 800045a:	4b81      	ldr	r3, [pc, #516]	; (8000660 <main+0x254>)
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	0018      	movs	r0, r3
 8000460:	f001 fda6 	bl	8001fb0 <srand>
  for(int i=0; i<60; i++)
 8000464:	2300      	movs	r3, #0
 8000466:	63bb      	str	r3, [r7, #56]	; 0x38
 8000468:	e006      	b.n	8000478 <main+0x6c>
  {
      WritePixelColor(0xFFFFFF);
 800046a:	4b7e      	ldr	r3, [pc, #504]	; (8000664 <main+0x258>)
 800046c:	0018      	movs	r0, r3
 800046e:	f7ff ffa9 	bl	80003c4 <WritePixelColor>
  for(int i=0; i<60; i++)
 8000472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000474:	3301      	adds	r3, #1
 8000476:	63bb      	str	r3, [r7, #56]	; 0x38
 8000478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800047a:	2b3b      	cmp	r3, #59	; 0x3b
 800047c:	ddf5      	ble.n	800046a <main+0x5e>
  }
  HAL_Delay(2000);
 800047e:	23fa      	movs	r3, #250	; 0xfa
 8000480:	00db      	lsls	r3, r3, #3
 8000482:	0018      	movs	r0, r3
 8000484:	f000 fbe2 	bl	8000c4c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  u32Count++;
 8000488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800048a:	3301      	adds	r3, #1
 800048c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if((u32Count & 0x0F) == 0)
 800048e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000490:	220f      	movs	r2, #15
 8000492:	4013      	ands	r3, r2
 8000494:	d112      	bne.n	80004bc <main+0xb0>
	  {
		  for(int i=0; i<60; i++)
 8000496:	2300      	movs	r3, #0
 8000498:	637b      	str	r3, [r7, #52]	; 0x34
 800049a:	e006      	b.n	80004aa <main+0x9e>
		  {
			  WritePixelColor(0xFFDF00);
 800049c:	4b72      	ldr	r3, [pc, #456]	; (8000668 <main+0x25c>)
 800049e:	0018      	movs	r0, r3
 80004a0:	f7ff ff90 	bl	80003c4 <WritePixelColor>
		  for(int i=0; i<60; i++)
 80004a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004a6:	3301      	adds	r3, #1
 80004a8:	637b      	str	r3, [r7, #52]	; 0x34
 80004aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004ac:	2b3b      	cmp	r3, #59	; 0x3b
 80004ae:	ddf5      	ble.n	800049c <main+0x90>
		  }
	      HAL_Delay(2000);
 80004b0:	23fa      	movs	r3, #250	; 0xfa
 80004b2:	00db      	lsls	r3, r3, #3
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 fbc9 	bl	8000c4c <HAL_Delay>
 80004ba:	e7e5      	b.n	8000488 <main+0x7c>
	  }
	  else if ((u32Count & 0x07) == 0)
 80004bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004be:	2207      	movs	r2, #7
 80004c0:	4013      	ands	r3, r2
 80004c2:	d12e      	bne.n	8000522 <main+0x116>
	  {
		  Color = rand();
 80004c4:	f001 fda4 	bl	8002010 <rand>
 80004c8:	0003      	movs	r3, r0
 80004ca:	603b      	str	r3, [r7, #0]
		  srand(SysTick->VAL + Color);
 80004cc:	4b64      	ldr	r3, [pc, #400]	; (8000660 <main+0x254>)
 80004ce:	689a      	ldr	r2, [r3, #8]
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	18d3      	adds	r3, r2, r3
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 fd6b 	bl	8001fb0 <srand>
		  for(int i=0; i<60; i++)
 80004da:	2300      	movs	r3, #0
 80004dc:	633b      	str	r3, [r7, #48]	; 0x30
 80004de:	e017      	b.n	8000510 <main+0x104>
		  {

			  Color = rand() >> (12 + 16);
 80004e0:	f001 fd96 	bl	8002010 <rand>
 80004e4:	0003      	movs	r3, r0
 80004e6:	171b      	asrs	r3, r3, #28
 80004e8:	603b      	str	r3, [r7, #0]
			  Color %= 5;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	2105      	movs	r1, #5
 80004ee:	0018      	movs	r0, r3
 80004f0:	f7ff fe9a 	bl	8000228 <__aeabi_uidivmod>
 80004f4:	000b      	movs	r3, r1
 80004f6:	603b      	str	r3, [r7, #0]
			  Color = u32ColorsMax[Color];
 80004f8:	4b5c      	ldr	r3, [pc, #368]	; (800066c <main+0x260>)
 80004fa:	683a      	ldr	r2, [r7, #0]
 80004fc:	0092      	lsls	r2, r2, #2
 80004fe:	58d3      	ldr	r3, [r2, r3]
 8000500:	603b      	str	r3, [r7, #0]
			  WritePixelColor(Color);
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	0018      	movs	r0, r3
 8000506:	f7ff ff5d 	bl	80003c4 <WritePixelColor>
		  for(int i=0; i<60; i++)
 800050a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800050c:	3301      	adds	r3, #1
 800050e:	633b      	str	r3, [r7, #48]	; 0x30
 8000510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000512:	2b3b      	cmp	r3, #59	; 0x3b
 8000514:	dde4      	ble.n	80004e0 <main+0xd4>
		  }
	      HAL_Delay(2000);
 8000516:	23fa      	movs	r3, #250	; 0xfa
 8000518:	00db      	lsls	r3, r3, #3
 800051a:	0018      	movs	r0, r3
 800051c:	f000 fb96 	bl	8000c4c <HAL_Delay>
 8000520:	e7b2      	b.n	8000488 <main+0x7c>

	  }
	  else
	  {
		  u32Sub = rand() >> (30);
 8000522:	f001 fd75 	bl	8002010 <rand>
 8000526:	0003      	movs	r3, r0
 8000528:	179b      	asrs	r3, r3, #30
 800052a:	60fb      	str	r3, [r7, #12]
		  u32Sub &= 1;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	2201      	movs	r2, #1
 8000530:	4013      	ands	r3, r2
 8000532:	60fb      	str	r3, [r7, #12]
		  u32Delay = rand();
 8000534:	f001 fd6c 	bl	8002010 <rand>
 8000538:	0003      	movs	r3, r0
 800053a:	60bb      	str	r3, [r7, #8]
		  srand(SysTick->VAL + u32Delay);
 800053c:	4b48      	ldr	r3, [pc, #288]	; (8000660 <main+0x254>)
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	18d3      	adds	r3, r2, r3
 8000544:	0018      	movs	r0, r3
 8000546:	f001 fd33 	bl	8001fb0 <srand>
		  u32Delay = rand() >> (12 + 16);
 800054a:	f001 fd61 	bl	8002010 <rand>
 800054e:	0003      	movs	r3, r0
 8000550:	171b      	asrs	r3, r3, #28
 8000552:	60bb      	str	r3, [r7, #8]
		  u32Delay %= 1;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
		  u32Delay += 1;
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	3301      	adds	r3, #1
 800055c:	60bb      	str	r3, [r7, #8]
		  u32Delay *= 1000;
 800055e:	68ba      	ldr	r2, [r7, #8]
 8000560:	0013      	movs	r3, r2
 8000562:	015b      	lsls	r3, r3, #5
 8000564:	1a9b      	subs	r3, r3, r2
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	189b      	adds	r3, r3, r2
 800056a:	00db      	lsls	r3, r3, #3
 800056c:	60bb      	str	r3, [r7, #8]
		  if(u32Sub & 1)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2201      	movs	r2, #1
 8000572:	4013      	ands	r3, r2
 8000574:	d061      	beq.n	800063a <main+0x22e>
		  {
			  Color = rand();
 8000576:	f001 fd4b 	bl	8002010 <rand>
 800057a:	0003      	movs	r3, r0
 800057c:	603b      	str	r3, [r7, #0]
			  srand(SysTick->VAL + Color);
 800057e:	4b38      	ldr	r3, [pc, #224]	; (8000660 <main+0x254>)
 8000580:	689a      	ldr	r2, [r3, #8]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	18d3      	adds	r3, r2, r3
 8000586:	0018      	movs	r0, r3
 8000588:	f001 fd12 	bl	8001fb0 <srand>
			  for(int i=0; i<60; i++)
 800058c:	2300      	movs	r3, #0
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000590:	e04f      	b.n	8000632 <main+0x226>
			  {
				  Color = rand() >> (12+ 16);
 8000592:	f001 fd3d 	bl	8002010 <rand>
 8000596:	0003      	movs	r3, r0
 8000598:	171b      	asrs	r3, r3, #28
 800059a:	603b      	str	r3, [r7, #0]
				  Color %= 5;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	2105      	movs	r1, #5
 80005a0:	0018      	movs	r0, r3
 80005a2:	f7ff fe41 	bl	8000228 <__aeabi_uidivmod>
 80005a6:	000b      	movs	r3, r1
 80005a8:	603b      	str	r3, [r7, #0]
				  Color = u32Colors[Color];
 80005aa:	4b31      	ldr	r3, [pc, #196]	; (8000670 <main+0x264>)
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	0092      	lsls	r2, r2, #2
 80005b0:	58d3      	ldr	r3, [r2, r3]
 80005b2:	603b      	str	r3, [r7, #0]
				  u32Intensidad = rand() >> (10+ 16);
 80005b4:	f001 fd2c 	bl	8002010 <rand>
 80005b8:	0003      	movs	r3, r0
 80005ba:	169b      	asrs	r3, r3, #26
 80005bc:	607b      	str	r3, [r7, #4]
				  u32Intensidad %= 8;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2207      	movs	r2, #7
 80005c2:	4013      	ands	r3, r2
 80005c4:	607b      	str	r3, [r7, #4]

					Red = Color >> 16;
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	0c1b      	lsrs	r3, r3, #16
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
					Red &= 0xFF;
 80005cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ce:	22ff      	movs	r2, #255	; 0xff
 80005d0:	4013      	ands	r3, r2
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
					Red >>= u32Intensidad;
 80005d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	40da      	lsrs	r2, r3
 80005da:	0013      	movs	r3, r2
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
					Green = Color >> 8;
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	0a1b      	lsrs	r3, r3, #8
 80005e2:	623b      	str	r3, [r7, #32]
					Green &= 0xFF;
 80005e4:	6a3b      	ldr	r3, [r7, #32]
 80005e6:	22ff      	movs	r2, #255	; 0xff
 80005e8:	4013      	ands	r3, r2
 80005ea:	623b      	str	r3, [r7, #32]
					Green >>= u32Intensidad;
 80005ec:	6a3a      	ldr	r2, [r7, #32]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	40da      	lsrs	r2, r3
 80005f2:	0013      	movs	r3, r2
 80005f4:	623b      	str	r3, [r7, #32]
					Blue = Color >> 0;
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	61fb      	str	r3, [r7, #28]
					Blue &= 0xFF;
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	22ff      	movs	r2, #255	; 0xff
 80005fe:	4013      	ands	r3, r2
 8000600:	61fb      	str	r3, [r7, #28]
					Blue >>= u32Intensidad;
 8000602:	69fa      	ldr	r2, [r7, #28]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	40da      	lsrs	r2, r3
 8000608:	0013      	movs	r3, r2
 800060a:	61fb      	str	r3, [r7, #28]
					Color = Red << 16;
 800060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060e:	041b      	lsls	r3, r3, #16
 8000610:	603b      	str	r3, [r7, #0]
					Color |= Green << 8;
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	021b      	lsls	r3, r3, #8
 8000616:	683a      	ldr	r2, [r7, #0]
 8000618:	4313      	orrs	r3, r2
 800061a:	603b      	str	r3, [r7, #0]
					Color |= Blue << 0;
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	4313      	orrs	r3, r2
 8000622:	603b      	str	r3, [r7, #0]
				  WritePixelColor(Color);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	0018      	movs	r0, r3
 8000628:	f7ff fecc 	bl	80003c4 <WritePixelColor>
			  for(int i=0; i<60; i++)
 800062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062e:	3301      	adds	r3, #1
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000634:	2b3b      	cmp	r3, #59	; 0x3b
 8000636:	ddac      	ble.n	8000592 <main+0x186>
 8000638:	e00b      	b.n	8000652 <main+0x246>
			  }
		  }
		  else
		  {
			  for(int i=0; i<60; i++)
 800063a:	2300      	movs	r3, #0
 800063c:	62bb      	str	r3, [r7, #40]	; 0x28
 800063e:	e005      	b.n	800064c <main+0x240>
			  {
				  WritePixelColor(0);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff febf 	bl	80003c4 <WritePixelColor>
			  for(int i=0; i<60; i++)
 8000646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000648:	3301      	adds	r3, #1
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
 800064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800064e:	2b3b      	cmp	r3, #59	; 0x3b
 8000650:	ddf6      	ble.n	8000640 <main+0x234>
			  }
		  }
	      HAL_Delay(u32Delay);
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	0018      	movs	r0, r3
 8000656:	f000 faf9 	bl	8000c4c <HAL_Delay>
	  u32Count++;
 800065a:	e715      	b.n	8000488 <main+0x7c>
 800065c:	40013000 	.word	0x40013000
 8000660:	e000e010 	.word	0xe000e010
 8000664:	00ffffff 	.word	0x00ffffff
 8000668:	00ffdf00 	.word	0x00ffdf00
 800066c:	20000018 	.word	0x20000018
 8000670:	20000004 	.word	0x20000004

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b091      	sub	sp, #68	; 0x44
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	2410      	movs	r4, #16
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	2330      	movs	r3, #48	; 0x30
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f001 fc8b 	bl	8001fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	003b      	movs	r3, r7
 800068c:	0018      	movs	r0, r3
 800068e:	2310      	movs	r3, #16
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f001 fc84 	bl	8001fa0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	0021      	movs	r1, r4
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2202      	movs	r2, #2
 800069e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2201      	movs	r2, #1
 80006a4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2210      	movs	r2, #16
 80006aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2202      	movs	r2, #2
 80006b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2200      	movs	r2, #0
 80006b6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	22a0      	movs	r2, #160	; 0xa0
 80006bc:	0392      	lsls	r2, r2, #14
 80006be:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2200      	movs	r2, #0
 80006c4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fd31 	bl	8001130 <HAL_RCC_OscConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80006d2:	f000 f8a7 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	003b      	movs	r3, r7
 80006d8:	2207      	movs	r2, #7
 80006da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	003b      	movs	r3, r7
 80006de:	2202      	movs	r2, #2
 80006e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	003b      	movs	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	003b      	movs	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ee:	003b      	movs	r3, r7
 80006f0:	2101      	movs	r1, #1
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 f836 	bl	8001764 <HAL_RCC_ClockConfig>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006fc:	f000 f892 	bl	8000824 <Error_Handler>
  }
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	b011      	add	sp, #68	; 0x44
 8000706:	bd90      	pop	{r4, r7, pc}

08000708 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_SPI1_Init+0x74>)
 800070e:	4a1c      	ldr	r2, [pc, #112]	; (8000780 <MX_SPI1_Init+0x78>)
 8000710:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_SPI1_Init+0x74>)
 8000714:	2282      	movs	r2, #130	; 0x82
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_SPI1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_15BIT;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_SPI1_Init+0x74>)
 8000722:	22e0      	movs	r2, #224	; 0xe0
 8000724:	0112      	lsls	r2, r2, #4
 8000726:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_SPI1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800072e:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_SPI1_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_SPI1_Init+0x74>)
 8000736:	2280      	movs	r2, #128	; 0x80
 8000738:	0092      	lsls	r2, r2, #2
 800073a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_SPI1_Init+0x74>)
 800073e:	2208      	movs	r2, #8
 8000740:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_SPI1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_SPI1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_SPI1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_SPI1_Init+0x74>)
 8000756:	2207      	movs	r2, #7
 8000758:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_SPI1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_SPI1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <MX_SPI1_Init+0x74>)
 8000768:	0018      	movs	r0, r3
 800076a:	f001 f92d 	bl	80019c8 <HAL_SPI_Init>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d001      	beq.n	8000776 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000772:	f000 f857 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000b8 	.word	0x200000b8
 8000780:	40013000 	.word	0x40013000

08000784 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_TIM17_Init+0x44>)
 800078a:	4a10      	ldr	r2, [pc, #64]	; (80007cc <MX_TIM17_Init+0x48>)
 800078c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 47999;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_TIM17_Init+0x44>)
 8000790:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <MX_TIM17_Init+0x4c>)
 8000792:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_TIM17_Init+0x44>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_TIM17_Init+0x44>)
 800079c:	4a0d      	ldr	r2, [pc, #52]	; (80007d4 <MX_TIM17_Init+0x50>)
 800079e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_TIM17_Init+0x44>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 10;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_TIM17_Init+0x44>)
 80007a8:	220a      	movs	r2, #10
 80007aa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_TIM17_Init+0x44>)
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <MX_TIM17_Init+0x44>)
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 f9bf 	bl	8001b38 <HAL_TIM_Base_Init>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80007be:	f000 f831 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	2000011c 	.word	0x2000011c
 80007cc:	40014800 	.word	0x40014800
 80007d0:	0000bb7f 	.word	0x0000bb7f
 80007d4:	0000ffff 	.word	0x0000ffff

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_GPIO_Init+0x48>)
 80007e0:	695a      	ldr	r2, [r3, #20]
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_GPIO_Init+0x48>)
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	03c9      	lsls	r1, r1, #15
 80007e8:	430a      	orrs	r2, r1
 80007ea:	615a      	str	r2, [r3, #20]
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_GPIO_Init+0x48>)
 80007ee:	695a      	ldr	r2, [r3, #20]
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	03db      	lsls	r3, r3, #15
 80007f4:	4013      	ands	r3, r2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_GPIO_Init+0x48>)
 80007fc:	695a      	ldr	r2, [r3, #20]
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_GPIO_Init+0x48>)
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	0289      	lsls	r1, r1, #10
 8000804:	430a      	orrs	r2, r1
 8000806:	615a      	str	r2, [r3, #20]
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <MX_GPIO_Init+0x48>)
 800080a:	695a      	ldr	r2, [r3, #20]
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	029b      	lsls	r3, r3, #10
 8000810:	4013      	ands	r3, r2
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	40021000 	.word	0x40021000

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_MspInit+0x44>)
 8000838:	699a      	ldr	r2, [r3, #24]
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_MspInit+0x44>)
 800083c:	2101      	movs	r1, #1
 800083e:	430a      	orrs	r2, r1
 8000840:	619a      	str	r2, [r3, #24]
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_MspInit+0x44>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	2201      	movs	r2, #1
 8000848:	4013      	ands	r3, r2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_MspInit+0x44>)
 8000850:	69da      	ldr	r2, [r3, #28]
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_MspInit+0x44>)
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	0549      	lsls	r1, r1, #21
 8000858:	430a      	orrs	r2, r1
 800085a:	61da      	str	r2, [r3, #28]
 800085c:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_MspInit+0x44>)
 800085e:	69da      	ldr	r2, [r3, #28]
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	055b      	lsls	r3, r3, #21
 8000864:	4013      	ands	r3, r2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b08b      	sub	sp, #44	; 0x2c
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	2414      	movs	r4, #20
 8000882:	193b      	adds	r3, r7, r4
 8000884:	0018      	movs	r0, r3
 8000886:	2314      	movs	r3, #20
 8000888:	001a      	movs	r2, r3
 800088a:	2100      	movs	r1, #0
 800088c:	f001 fb88 	bl	8001fa0 <memset>
  if(hspi->Instance==SPI1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <HAL_SPI_MspInit+0x90>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d132      	bne.n	8000900 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <HAL_SPI_MspInit+0x94>)
 800089c:	699a      	ldr	r2, [r3, #24]
 800089e:	4b1b      	ldr	r3, [pc, #108]	; (800090c <HAL_SPI_MspInit+0x94>)
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	0149      	lsls	r1, r1, #5
 80008a4:	430a      	orrs	r2, r1
 80008a6:	619a      	str	r2, [r3, #24]
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_SPI_MspInit+0x94>)
 80008aa:	699a      	ldr	r2, [r3, #24]
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	015b      	lsls	r3, r3, #5
 80008b0:	4013      	ands	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_SPI_MspInit+0x94>)
 80008b8:	695a      	ldr	r2, [r3, #20]
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <HAL_SPI_MspInit+0x94>)
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	0289      	lsls	r1, r1, #10
 80008c0:	430a      	orrs	r2, r1
 80008c2:	615a      	str	r2, [r3, #20]
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <HAL_SPI_MspInit+0x94>)
 80008c6:	695a      	ldr	r2, [r3, #20]
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	029b      	lsls	r3, r3, #10
 80008cc:	4013      	ands	r3, r2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80008d2:	0021      	movs	r1, r4
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	22a0      	movs	r2, #160	; 0xa0
 80008d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2202      	movs	r2, #2
 80008de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2202      	movs	r2, #2
 80008e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2203      	movs	r2, #3
 80008ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	187a      	adds	r2, r7, r1
 80008f4:	2390      	movs	r3, #144	; 0x90
 80008f6:	05db      	lsls	r3, r3, #23
 80008f8:	0011      	movs	r1, r2
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 faa8 	bl	8000e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b00b      	add	sp, #44	; 0x2c
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	40013000 	.word	0x40013000
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_TIM_Base_MspInit+0x48>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d115      	bne.n	800094e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_TIM_Base_MspInit+0x4c>)
 8000924:	699a      	ldr	r2, [r3, #24]
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <HAL_TIM_Base_MspInit+0x4c>)
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	02c9      	lsls	r1, r1, #11
 800092c:	430a      	orrs	r2, r1
 800092e:	619a      	str	r2, [r3, #24]
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_TIM_Base_MspInit+0x4c>)
 8000932:	699a      	ldr	r2, [r3, #24]
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	02db      	lsls	r3, r3, #11
 8000938:	4013      	ands	r3, r2
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2016      	movs	r0, #22
 8000944:	f000 fa52 	bl	8000dec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000948:	2016      	movs	r0, #22
 800094a:	f000 fa64 	bl	8000e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b004      	add	sp, #16
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	40014800 	.word	0x40014800
 800095c:	40021000 	.word	0x40021000

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <NMI_Handler+0x4>

08000966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <HardFault_Handler+0x4>

0800096c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 f946 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <TIM17_IRQHandler+0x14>)
 8000996:	0018      	movs	r0, r3
 8000998:	f001 f91e 	bl	8001bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	2000011c 	.word	0x2000011c

080009a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	return 1;
 80009ac:	2301      	movs	r3, #1
}
 80009ae:	0018      	movs	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <_kill>:

int _kill(int pid, int sig)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009be:	f001 fac5 	bl	8001f4c <__errno>
 80009c2:	0003      	movs	r3, r0
 80009c4:	2216      	movs	r2, #22
 80009c6:	601a      	str	r2, [r3, #0]
	return -1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	425b      	negs	r3, r3
}
 80009cc:	0018      	movs	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_exit>:

void _exit (int status)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009dc:	2301      	movs	r3, #1
 80009de:	425a      	negs	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f7ff ffe5 	bl	80009b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80009ea:	e7fe      	b.n	80009ea <_exit+0x16>

080009ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	e00a      	b.n	8000a14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009fe:	e000      	b.n	8000a02 <_read+0x16>
 8000a00:	bf00      	nop
 8000a02:	0001      	movs	r1, r0
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	60ba      	str	r2, [r7, #8]
 8000a0a:	b2ca      	uxtb	r2, r1
 8000a0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	3301      	adds	r3, #1
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	dbf0      	blt.n	80009fe <_read+0x12>
	}

return len;
 8000a1c:	687b      	ldr	r3, [r7, #4]
}
 8000a1e:	0018      	movs	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b006      	add	sp, #24
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	60f8      	str	r0, [r7, #12]
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	e009      	b.n	8000a4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	60ba      	str	r2, [r7, #8]
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	0018      	movs	r0, r3
 8000a42:	e000      	b.n	8000a46 <_write+0x20>
 8000a44:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697a      	ldr	r2, [r7, #20]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dbf1      	blt.n	8000a38 <_write+0x12>
	}
	return len;
 8000a54:	687b      	ldr	r3, [r7, #4]
}
 8000a56:	0018      	movs	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b006      	add	sp, #24
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <_close>:

int _close(int file)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
	return -1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	425b      	negs	r3, r3
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	0192      	lsls	r2, r2, #6
 8000a82:	605a      	str	r2, [r3, #4]
	return 0;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	0018      	movs	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	b002      	add	sp, #8
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <_isatty>:

int _isatty(int file)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
	return 1;
 8000a96:	2301      	movs	r3, #1
}
 8000a98:	0018      	movs	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
	return 0;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	0018      	movs	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b004      	add	sp, #16
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <_sbrk+0x5c>)
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <_sbrk+0x60>)
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <_sbrk+0x64>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <_sbrk+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	18d3      	adds	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d207      	bcs.n	8000af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae8:	f001 fa30 	bl	8001f4c <__errno>
 8000aec:	0003      	movs	r3, r0
 8000aee:	220c      	movs	r2, #12
 8000af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	425b      	negs	r3, r3
 8000af6:	e009      	b.n	8000b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	18d2      	adds	r2, r2, r3
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <_sbrk+0x64>)
 8000b08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b006      	add	sp, #24
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20001000 	.word	0x20001000
 8000b18:	00000400 	.word	0x00000400
 8000b1c:	20000164 	.word	0x20000164
 8000b20:	20000180 	.word	0x20000180

08000b24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490e      	ldr	r1, [pc, #56]	; (8000b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0b      	ldr	r4, [pc, #44]	; (8000b7c <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b5a:	f7ff ffe3 	bl	8000b24 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b5e:	f001 f9fb 	bl	8001f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b62:	f7ff fc53 	bl	800040c <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
  ldr   r0, =_estack
 8000b68:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000b74:	080032b4 	.word	0x080032b4
  ldr r2, =_sbss
 8000b78:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000b7c:	2000017c 	.word	0x2000017c

08000b80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_IRQHandler>
	...

08000b84 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <HAL_Init+0x24>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_Init+0x24>)
 8000b8e:	2110      	movs	r1, #16
 8000b90:	430a      	orrs	r2, r1
 8000b92:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 f809 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9a:	f7ff fe49 	bl	8000830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
}
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40022000 	.word	0x40022000

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <HAL_InitTick+0x5c>)
 8000bb6:	681c      	ldr	r4, [r3, #0]
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_InitTick+0x60>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	23fa      	movs	r3, #250	; 0xfa
 8000bc0:	0098      	lsls	r0, r3, #2
 8000bc2:	f7ff faab 	bl	800011c <__udivsi3>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	0019      	movs	r1, r3
 8000bca:	0020      	movs	r0, r4
 8000bcc:	f7ff faa6 	bl	800011c <__udivsi3>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 f92f 	bl	8000e36 <HAL_SYSTICK_Config>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e00f      	b.n	8000c00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	d80b      	bhi.n	8000bfe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	2301      	movs	r3, #1
 8000bea:	425b      	negs	r3, r3
 8000bec:	2200      	movs	r2, #0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 f8fc 	bl	8000dec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_InitTick+0x64>)
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b003      	add	sp, #12
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	2000002c 	.word	0x2000002c
 8000c0c:	20000034 	.word	0x20000034
 8000c10:	20000030 	.word	0x20000030

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x1c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_IncTick+0x20>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	18d2      	adds	r2, r2, r3
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <HAL_IncTick+0x20>)
 8000c26:	601a      	str	r2, [r3, #0]
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	20000034 	.word	0x20000034
 8000c34:	20000168 	.word	0x20000168

08000c38 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <HAL_GetTick+0x10>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	20000168 	.word	0x20000168

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff fff0 	bl	8000c38 <HAL_GetTick>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	3301      	adds	r3, #1
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	001a      	movs	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	189b      	adds	r3, r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	f7ff ffe0 	bl	8000c38 <HAL_GetTick>
 8000c78:	0002      	movs	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b004      	add	sp, #16
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	20000034 	.word	0x20000034

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ca6:	d809      	bhi.n	8000cbc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	001a      	movs	r2, r3
 8000cae:	231f      	movs	r3, #31
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_EnableIRQ+0x30>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	000a      	movs	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
  }
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b7f      	cmp	r3, #127	; 0x7f
 8000cdc:	d828      	bhi.n	8000d30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cde:	4a2f      	ldr	r2, [pc, #188]	; (8000d9c <__NVIC_SetPriority+0xd4>)
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	33c0      	adds	r3, #192	; 0xc0
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	589b      	ldr	r3, [r3, r2]
 8000cee:	1dfa      	adds	r2, r7, #7
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	00d2      	lsls	r2, r2, #3
 8000cfa:	21ff      	movs	r1, #255	; 0xff
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	000a      	movs	r2, r1
 8000d00:	43d2      	mvns	r2, r2
 8000d02:	401a      	ands	r2, r3
 8000d04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	019b      	lsls	r3, r3, #6
 8000d0a:	22ff      	movs	r2, #255	; 0xff
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	0018      	movs	r0, r3
 8000d14:	2303      	movs	r3, #3
 8000d16:	4003      	ands	r3, r0
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1c:	481f      	ldr	r0, [pc, #124]	; (8000d9c <__NVIC_SetPriority+0xd4>)
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	430a      	orrs	r2, r1
 8000d28:	33c0      	adds	r3, #192	; 0xc0
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d2e:	e031      	b.n	8000d94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <__NVIC_SetPriority+0xd8>)
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	0019      	movs	r1, r3
 8000d38:	230f      	movs	r3, #15
 8000d3a:	400b      	ands	r3, r1
 8000d3c:	3b08      	subs	r3, #8
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3306      	adds	r3, #6
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	18d3      	adds	r3, r2, r3
 8000d46:	3304      	adds	r3, #4
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	1dfa      	adds	r2, r7, #7
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	0011      	movs	r1, r2
 8000d50:	2203      	movs	r2, #3
 8000d52:	400a      	ands	r2, r1
 8000d54:	00d2      	lsls	r2, r2, #3
 8000d56:	21ff      	movs	r1, #255	; 0xff
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	000a      	movs	r2, r1
 8000d5c:	43d2      	mvns	r2, r2
 8000d5e:	401a      	ands	r2, r3
 8000d60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	019b      	lsls	r3, r3, #6
 8000d66:	22ff      	movs	r2, #255	; 0xff
 8000d68:	401a      	ands	r2, r3
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	0018      	movs	r0, r3
 8000d70:	2303      	movs	r3, #3
 8000d72:	4003      	ands	r3, r0
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <__NVIC_SetPriority+0xd8>)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	001c      	movs	r4, r3
 8000d80:	230f      	movs	r3, #15
 8000d82:	4023      	ands	r3, r4
 8000d84:	3b08      	subs	r3, #8
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	3306      	adds	r3, #6
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	18c3      	adds	r3, r0, r3
 8000d90:	3304      	adds	r3, #4
 8000d92:	601a      	str	r2, [r3, #0]
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b003      	add	sp, #12
 8000d9a:	bd90      	pop	{r4, r7, pc}
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	1e5a      	subs	r2, r3, #1
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	045b      	lsls	r3, r3, #17
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d301      	bcc.n	8000dbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db8:	2301      	movs	r3, #1
 8000dba:	e010      	b.n	8000dde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <SysTick_Config+0x44>)
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	2103      	movs	r1, #3
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f7ff ff7c 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SysTick_Config+0x44>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <SysTick_Config+0x44>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	e000e010 	.word	0xe000e010

08000dec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	210f      	movs	r1, #15
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	1c02      	adds	r2, r0, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	0011      	movs	r1, r2
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b004      	add	sp, #16
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f7ff ff33 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff ffaf 	bl	8000da4 <SysTick_Config>
 8000e46:	0003      	movs	r3, r0
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5e:	e14f      	b.n	8001100 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2101      	movs	r1, #1
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4091      	lsls	r1, r2
 8000e6a:	000a      	movs	r2, r1
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d100      	bne.n	8000e78 <HAL_GPIO_Init+0x28>
 8000e76:	e140      	b.n	80010fa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d005      	beq.n	8000e90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2203      	movs	r2, #3
 8000e8a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d130      	bne.n	8000ef2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	409a      	lsls	r2, r3
 8000e9e:	0013      	movs	r3, r2
 8000ea0:	43da      	mvns	r2, r3
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	409a      	lsls	r2, r3
 8000eb2:	0013      	movs	r3, r2
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	2201      	movs	r2, #1
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d017      	beq.n	8000f2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2203      	movs	r2, #3
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d123      	bne.n	8000f82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	0092      	lsls	r2, r2, #2
 8000f44:	58d3      	ldr	r3, [r2, r3]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	2207      	movs	r2, #7
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	220f      	movs	r2, #15
 8000f52:	409a      	lsls	r2, r3
 8000f54:	0013      	movs	r3, r2
 8000f56:	43da      	mvns	r2, r3
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	691a      	ldr	r2, [r3, #16]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	2107      	movs	r1, #7
 8000f66:	400b      	ands	r3, r1
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	0013      	movs	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	0092      	lsls	r2, r2, #2
 8000f7e:	6939      	ldr	r1, [r7, #16]
 8000f80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	401a      	ands	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	23c0      	movs	r3, #192	; 0xc0
 8000fbc:	029b      	lsls	r3, r3, #10
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d100      	bne.n	8000fc4 <HAL_GPIO_Init+0x174>
 8000fc2:	e09a      	b.n	80010fa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc4:	4b54      	ldr	r3, [pc, #336]	; (8001118 <HAL_GPIO_Init+0x2c8>)
 8000fc6:	699a      	ldr	r2, [r3, #24]
 8000fc8:	4b53      	ldr	r3, [pc, #332]	; (8001118 <HAL_GPIO_Init+0x2c8>)
 8000fca:	2101      	movs	r1, #1
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	619a      	str	r2, [r3, #24]
 8000fd0:	4b51      	ldr	r3, [pc, #324]	; (8001118 <HAL_GPIO_Init+0x2c8>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fdc:	4a4f      	ldr	r2, [pc, #316]	; (800111c <HAL_GPIO_Init+0x2cc>)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	089b      	lsrs	r3, r3, #2
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	589b      	ldr	r3, [r3, r2]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2203      	movs	r2, #3
 8000fee:	4013      	ands	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	0013      	movs	r3, r2
 8000ff8:	43da      	mvns	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	2390      	movs	r3, #144	; 0x90
 8001004:	05db      	lsls	r3, r3, #23
 8001006:	429a      	cmp	r2, r3
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0x1e2>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a44      	ldr	r2, [pc, #272]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00d      	beq.n	800102e <HAL_GPIO_Init+0x1de>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a43      	ldr	r2, [pc, #268]	; (8001124 <HAL_GPIO_Init+0x2d4>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x1da>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a42      	ldr	r2, [pc, #264]	; (8001128 <HAL_GPIO_Init+0x2d8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_GPIO_Init+0x1d6>
 8001022:	2303      	movs	r3, #3
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x1e4>
 8001026:	2305      	movs	r3, #5
 8001028:	e004      	b.n	8001034 <HAL_GPIO_Init+0x1e4>
 800102a:	2302      	movs	r3, #2
 800102c:	e002      	b.n	8001034 <HAL_GPIO_Init+0x1e4>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x1e4>
 8001032:	2300      	movs	r3, #0
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	2103      	movs	r1, #3
 8001038:	400a      	ands	r2, r1
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4093      	lsls	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001044:	4935      	ldr	r1, [pc, #212]	; (800111c <HAL_GPIO_Init+0x2cc>)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001052:	4b36      	ldr	r3, [pc, #216]	; (800112c <HAL_GPIO_Init+0x2dc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	43da      	mvns	r2, r3
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	2380      	movs	r3, #128	; 0x80
 8001068:	025b      	lsls	r3, r3, #9
 800106a:	4013      	ands	r3, r2
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001076:	4b2d      	ldr	r3, [pc, #180]	; (800112c <HAL_GPIO_Init+0x2dc>)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <HAL_GPIO_Init+0x2dc>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43da      	mvns	r2, r3
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	029b      	lsls	r3, r3, #10
 8001094:	4013      	ands	r3, r2
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <HAL_GPIO_Init+0x2dc>)
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <HAL_GPIO_Init+0x2dc>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43da      	mvns	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	035b      	lsls	r3, r3, #13
 80010be:	4013      	ands	r3, r2
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <HAL_GPIO_Init+0x2dc>)
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <HAL_GPIO_Init+0x2dc>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43da      	mvns	r2, r3
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	039b      	lsls	r3, r3, #14
 80010e8:	4013      	ands	r3, r2
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HAL_GPIO_Init+0x2dc>)
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	40da      	lsrs	r2, r3
 8001108:	1e13      	subs	r3, r2, #0
 800110a:	d000      	beq.n	800110e <HAL_GPIO_Init+0x2be>
 800110c:	e6a8      	b.n	8000e60 <HAL_GPIO_Init+0x10>
  } 
}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b006      	add	sp, #24
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40021000 	.word	0x40021000
 800111c:	40010000 	.word	0x40010000
 8001120:	48000400 	.word	0x48000400
 8001124:	48000800 	.word	0x48000800
 8001128:	48000c00 	.word	0x48000c00
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e301      	b.n	8001746 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2201      	movs	r2, #1
 8001148:	4013      	ands	r3, r2
 800114a:	d100      	bne.n	800114e <HAL_RCC_OscConfig+0x1e>
 800114c:	e08d      	b.n	800126a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800114e:	4bc3      	ldr	r3, [pc, #780]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	220c      	movs	r2, #12
 8001154:	4013      	ands	r3, r2
 8001156:	2b04      	cmp	r3, #4
 8001158:	d00e      	beq.n	8001178 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800115a:	4bc0      	ldr	r3, [pc, #768]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	220c      	movs	r2, #12
 8001160:	4013      	ands	r3, r2
 8001162:	2b08      	cmp	r3, #8
 8001164:	d116      	bne.n	8001194 <HAL_RCC_OscConfig+0x64>
 8001166:	4bbd      	ldr	r3, [pc, #756]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	025b      	lsls	r3, r3, #9
 800116e:	401a      	ands	r2, r3
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	025b      	lsls	r3, r3, #9
 8001174:	429a      	cmp	r2, r3
 8001176:	d10d      	bne.n	8001194 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	4bb8      	ldr	r3, [pc, #736]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	029b      	lsls	r3, r3, #10
 8001180:	4013      	ands	r3, r2
 8001182:	d100      	bne.n	8001186 <HAL_RCC_OscConfig+0x56>
 8001184:	e070      	b.n	8001268 <HAL_RCC_OscConfig+0x138>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d000      	beq.n	8001190 <HAL_RCC_OscConfig+0x60>
 800118e:	e06b      	b.n	8001268 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e2d8      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d107      	bne.n	80011ac <HAL_RCC_OscConfig+0x7c>
 800119c:	4baf      	ldr	r3, [pc, #700]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4bae      	ldr	r3, [pc, #696]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	0249      	lsls	r1, r1, #9
 80011a6:	430a      	orrs	r2, r1
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	e02f      	b.n	800120c <HAL_RCC_OscConfig+0xdc>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10c      	bne.n	80011ce <HAL_RCC_OscConfig+0x9e>
 80011b4:	4ba9      	ldr	r3, [pc, #676]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4ba8      	ldr	r3, [pc, #672]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80011ba:	49a9      	ldr	r1, [pc, #676]	; (8001460 <HAL_RCC_OscConfig+0x330>)
 80011bc:	400a      	ands	r2, r1
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	4ba6      	ldr	r3, [pc, #664]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4ba5      	ldr	r3, [pc, #660]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80011c6:	49a7      	ldr	r1, [pc, #668]	; (8001464 <HAL_RCC_OscConfig+0x334>)
 80011c8:	400a      	ands	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e01e      	b.n	800120c <HAL_RCC_OscConfig+0xdc>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d10e      	bne.n	80011f4 <HAL_RCC_OscConfig+0xc4>
 80011d6:	4ba1      	ldr	r3, [pc, #644]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4ba0      	ldr	r3, [pc, #640]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80011dc:	2180      	movs	r1, #128	; 0x80
 80011de:	02c9      	lsls	r1, r1, #11
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	4b9d      	ldr	r3, [pc, #628]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b9c      	ldr	r3, [pc, #624]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80011ea:	2180      	movs	r1, #128	; 0x80
 80011ec:	0249      	lsls	r1, r1, #9
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	e00b      	b.n	800120c <HAL_RCC_OscConfig+0xdc>
 80011f4:	4b99      	ldr	r3, [pc, #612]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b98      	ldr	r3, [pc, #608]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80011fa:	4999      	ldr	r1, [pc, #612]	; (8001460 <HAL_RCC_OscConfig+0x330>)
 80011fc:	400a      	ands	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	4b96      	ldr	r3, [pc, #600]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b95      	ldr	r3, [pc, #596]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001206:	4997      	ldr	r1, [pc, #604]	; (8001464 <HAL_RCC_OscConfig+0x334>)
 8001208:	400a      	ands	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d014      	beq.n	800123e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fd10 	bl	8000c38 <HAL_GetTick>
 8001218:	0003      	movs	r3, r0
 800121a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121e:	f7ff fd0b 	bl	8000c38 <HAL_GetTick>
 8001222:	0002      	movs	r2, r0
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b64      	cmp	r3, #100	; 0x64
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e28a      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001230:	4b8a      	ldr	r3, [pc, #552]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	029b      	lsls	r3, r3, #10
 8001238:	4013      	ands	r3, r2
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0xee>
 800123c:	e015      	b.n	800126a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fcfb 	bl	8000c38 <HAL_GetTick>
 8001242:	0003      	movs	r3, r0
 8001244:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fcf6 	bl	8000c38 <HAL_GetTick>
 800124c:	0002      	movs	r2, r0
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e275      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125a:	4b80      	ldr	r3, [pc, #512]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	029b      	lsls	r3, r3, #10
 8001262:	4013      	ands	r3, r2
 8001264:	d1f0      	bne.n	8001248 <HAL_RCC_OscConfig+0x118>
 8001266:	e000      	b.n	800126a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001268:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2202      	movs	r2, #2
 8001270:	4013      	ands	r3, r2
 8001272:	d100      	bne.n	8001276 <HAL_RCC_OscConfig+0x146>
 8001274:	e069      	b.n	800134a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001276:	4b79      	ldr	r3, [pc, #484]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	220c      	movs	r2, #12
 800127c:	4013      	ands	r3, r2
 800127e:	d00b      	beq.n	8001298 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001280:	4b76      	ldr	r3, [pc, #472]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	220c      	movs	r2, #12
 8001286:	4013      	ands	r3, r2
 8001288:	2b08      	cmp	r3, #8
 800128a:	d11c      	bne.n	80012c6 <HAL_RCC_OscConfig+0x196>
 800128c:	4b73      	ldr	r3, [pc, #460]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	025b      	lsls	r3, r3, #9
 8001294:	4013      	ands	r3, r2
 8001296:	d116      	bne.n	80012c6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001298:	4b70      	ldr	r3, [pc, #448]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2202      	movs	r2, #2
 800129e:	4013      	ands	r3, r2
 80012a0:	d005      	beq.n	80012ae <HAL_RCC_OscConfig+0x17e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d001      	beq.n	80012ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e24b      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ae:	4b6b      	ldr	r3, [pc, #428]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	22f8      	movs	r2, #248	; 0xf8
 80012b4:	4393      	bics	r3, r2
 80012b6:	0019      	movs	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	691b      	ldr	r3, [r3, #16]
 80012bc:	00da      	lsls	r2, r3, #3
 80012be:	4b67      	ldr	r3, [pc, #412]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80012c0:	430a      	orrs	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c4:	e041      	b.n	800134a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d024      	beq.n	8001318 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ce:	4b63      	ldr	r3, [pc, #396]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4b62      	ldr	r3, [pc, #392]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80012d4:	2101      	movs	r1, #1
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fcad 	bl	8000c38 <HAL_GetTick>
 80012de:	0003      	movs	r3, r0
 80012e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fca8 	bl	8000c38 <HAL_GetTick>
 80012e8:	0002      	movs	r2, r0
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e227      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f6:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2202      	movs	r2, #2
 80012fc:	4013      	ands	r3, r2
 80012fe:	d0f1      	beq.n	80012e4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001300:	4b56      	ldr	r3, [pc, #344]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	22f8      	movs	r2, #248	; 0xf8
 8001306:	4393      	bics	r3, r2
 8001308:	0019      	movs	r1, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	691b      	ldr	r3, [r3, #16]
 800130e:	00da      	lsls	r2, r3, #3
 8001310:	4b52      	ldr	r3, [pc, #328]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e018      	b.n	800134a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001318:	4b50      	ldr	r3, [pc, #320]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b4f      	ldr	r3, [pc, #316]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 800131e:	2101      	movs	r1, #1
 8001320:	438a      	bics	r2, r1
 8001322:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fc88 	bl	8000c38 <HAL_GetTick>
 8001328:	0003      	movs	r3, r0
 800132a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132e:	f7ff fc83 	bl	8000c38 <HAL_GetTick>
 8001332:	0002      	movs	r2, r0
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e202      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001340:	4b46      	ldr	r3, [pc, #280]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2202      	movs	r2, #2
 8001346:	4013      	ands	r3, r2
 8001348:	d1f1      	bne.n	800132e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2208      	movs	r2, #8
 8001350:	4013      	ands	r3, r2
 8001352:	d036      	beq.n	80013c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d019      	beq.n	8001390 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800135c:	4b3f      	ldr	r3, [pc, #252]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 800135e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001360:	4b3e      	ldr	r3, [pc, #248]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001362:	2101      	movs	r1, #1
 8001364:	430a      	orrs	r2, r1
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001368:	f7ff fc66 	bl	8000c38 <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001372:	f7ff fc61 	bl	8000c38 <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e1e0      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001384:	4b35      	ldr	r3, [pc, #212]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	2202      	movs	r2, #2
 800138a:	4013      	ands	r3, r2
 800138c:	d0f1      	beq.n	8001372 <HAL_RCC_OscConfig+0x242>
 800138e:	e018      	b.n	80013c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001394:	4b31      	ldr	r3, [pc, #196]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001396:	2101      	movs	r1, #1
 8001398:	438a      	bics	r2, r1
 800139a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139c:	f7ff fc4c 	bl	8000c38 <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a6:	f7ff fc47 	bl	8000c38 <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e1c6      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	2202      	movs	r2, #2
 80013be:	4013      	ands	r3, r2
 80013c0:	d1f1      	bne.n	80013a6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2204      	movs	r2, #4
 80013c8:	4013      	ands	r3, r2
 80013ca:	d100      	bne.n	80013ce <HAL_RCC_OscConfig+0x29e>
 80013cc:	e0b4      	b.n	8001538 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ce:	201f      	movs	r0, #31
 80013d0:	183b      	adds	r3, r7, r0
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d6:	4b21      	ldr	r3, [pc, #132]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80013d8:	69da      	ldr	r2, [r3, #28]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	055b      	lsls	r3, r3, #21
 80013de:	4013      	ands	r3, r2
 80013e0:	d110      	bne.n	8001404 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80013e4:	69da      	ldr	r2, [r3, #28]
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80013e8:	2180      	movs	r1, #128	; 0x80
 80013ea:	0549      	lsls	r1, r1, #21
 80013ec:	430a      	orrs	r2, r1
 80013ee:	61da      	str	r2, [r3, #28]
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 80013f2:	69da      	ldr	r2, [r3, #28]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	055b      	lsls	r3, r3, #21
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013fe:	183b      	adds	r3, r7, r0
 8001400:	2201      	movs	r2, #1
 8001402:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_RCC_OscConfig+0x338>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4013      	ands	r3, r2
 800140e:	d11a      	bne.n	8001446 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_RCC_OscConfig+0x338>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b14      	ldr	r3, [pc, #80]	; (8001468 <HAL_RCC_OscConfig+0x338>)
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	0049      	lsls	r1, r1, #1
 800141a:	430a      	orrs	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141e:	f7ff fc0b 	bl	8000c38 <HAL_GetTick>
 8001422:	0003      	movs	r3, r0
 8001424:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001428:	f7ff fc06 	bl	8000c38 <HAL_GetTick>
 800142c:	0002      	movs	r2, r0
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e185      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <HAL_RCC_OscConfig+0x338>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4013      	ands	r3, r2
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d10e      	bne.n	800146c <HAL_RCC_OscConfig+0x33c>
 800144e:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001450:	6a1a      	ldr	r2, [r3, #32]
 8001452:	4b02      	ldr	r3, [pc, #8]	; (800145c <HAL_RCC_OscConfig+0x32c>)
 8001454:	2101      	movs	r1, #1
 8001456:	430a      	orrs	r2, r1
 8001458:	621a      	str	r2, [r3, #32]
 800145a:	e035      	b.n	80014c8 <HAL_RCC_OscConfig+0x398>
 800145c:	40021000 	.word	0x40021000
 8001460:	fffeffff 	.word	0xfffeffff
 8001464:	fffbffff 	.word	0xfffbffff
 8001468:	40007000 	.word	0x40007000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d10c      	bne.n	800148e <HAL_RCC_OscConfig+0x35e>
 8001474:	4bb6      	ldr	r3, [pc, #728]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001476:	6a1a      	ldr	r2, [r3, #32]
 8001478:	4bb5      	ldr	r3, [pc, #724]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 800147a:	2101      	movs	r1, #1
 800147c:	438a      	bics	r2, r1
 800147e:	621a      	str	r2, [r3, #32]
 8001480:	4bb3      	ldr	r3, [pc, #716]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001482:	6a1a      	ldr	r2, [r3, #32]
 8001484:	4bb2      	ldr	r3, [pc, #712]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001486:	2104      	movs	r1, #4
 8001488:	438a      	bics	r2, r1
 800148a:	621a      	str	r2, [r3, #32]
 800148c:	e01c      	b.n	80014c8 <HAL_RCC_OscConfig+0x398>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b05      	cmp	r3, #5
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x380>
 8001496:	4bae      	ldr	r3, [pc, #696]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001498:	6a1a      	ldr	r2, [r3, #32]
 800149a:	4bad      	ldr	r3, [pc, #692]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 800149c:	2104      	movs	r1, #4
 800149e:	430a      	orrs	r2, r1
 80014a0:	621a      	str	r2, [r3, #32]
 80014a2:	4bab      	ldr	r3, [pc, #684]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80014a4:	6a1a      	ldr	r2, [r3, #32]
 80014a6:	4baa      	ldr	r3, [pc, #680]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80014a8:	2101      	movs	r1, #1
 80014aa:	430a      	orrs	r2, r1
 80014ac:	621a      	str	r2, [r3, #32]
 80014ae:	e00b      	b.n	80014c8 <HAL_RCC_OscConfig+0x398>
 80014b0:	4ba7      	ldr	r3, [pc, #668]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80014b2:	6a1a      	ldr	r2, [r3, #32]
 80014b4:	4ba6      	ldr	r3, [pc, #664]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	438a      	bics	r2, r1
 80014ba:	621a      	str	r2, [r3, #32]
 80014bc:	4ba4      	ldr	r3, [pc, #656]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80014be:	6a1a      	ldr	r2, [r3, #32]
 80014c0:	4ba3      	ldr	r3, [pc, #652]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80014c2:	2104      	movs	r1, #4
 80014c4:	438a      	bics	r2, r1
 80014c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d014      	beq.n	80014fa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d0:	f7ff fbb2 	bl	8000c38 <HAL_GetTick>
 80014d4:	0003      	movs	r3, r0
 80014d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d8:	e009      	b.n	80014ee <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f7ff fbad 	bl	8000c38 <HAL_GetTick>
 80014de:	0002      	movs	r2, r0
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	4a9b      	ldr	r2, [pc, #620]	; (8001754 <HAL_RCC_OscConfig+0x624>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e12b      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ee:	4b98      	ldr	r3, [pc, #608]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x3aa>
 80014f8:	e013      	b.n	8001522 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fb9d 	bl	8000c38 <HAL_GetTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001502:	e009      	b.n	8001518 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001504:	f7ff fb98 	bl	8000c38 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	4a91      	ldr	r2, [pc, #580]	; (8001754 <HAL_RCC_OscConfig+0x624>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e116      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001518:	4b8d      	ldr	r3, [pc, #564]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	2202      	movs	r2, #2
 800151e:	4013      	ands	r3, r2
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001522:	231f      	movs	r3, #31
 8001524:	18fb      	adds	r3, r7, r3
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d105      	bne.n	8001538 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800152c:	4b88      	ldr	r3, [pc, #544]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 800152e:	69da      	ldr	r2, [r3, #28]
 8001530:	4b87      	ldr	r3, [pc, #540]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001532:	4989      	ldr	r1, [pc, #548]	; (8001758 <HAL_RCC_OscConfig+0x628>)
 8001534:	400a      	ands	r2, r1
 8001536:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2210      	movs	r2, #16
 800153e:	4013      	ands	r3, r2
 8001540:	d063      	beq.n	800160a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d12a      	bne.n	80015a0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800154a:	4b81      	ldr	r3, [pc, #516]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 800154c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154e:	4b80      	ldr	r3, [pc, #512]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001550:	2104      	movs	r1, #4
 8001552:	430a      	orrs	r2, r1
 8001554:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001556:	4b7e      	ldr	r3, [pc, #504]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800155a:	4b7d      	ldr	r3, [pc, #500]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 800155c:	2101      	movs	r1, #1
 800155e:	430a      	orrs	r2, r1
 8001560:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fb69 	bl	8000c38 <HAL_GetTick>
 8001566:	0003      	movs	r3, r0
 8001568:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800156c:	f7ff fb64 	bl	8000c38 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0e3      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800157e:	4b74      	ldr	r3, [pc, #464]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001582:	2202      	movs	r2, #2
 8001584:	4013      	ands	r3, r2
 8001586:	d0f1      	beq.n	800156c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001588:	4b71      	ldr	r3, [pc, #452]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 800158a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158c:	22f8      	movs	r2, #248	; 0xf8
 800158e:	4393      	bics	r3, r2
 8001590:	0019      	movs	r1, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	00da      	lsls	r2, r3, #3
 8001598:	4b6d      	ldr	r3, [pc, #436]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 800159a:	430a      	orrs	r2, r1
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
 800159e:	e034      	b.n	800160a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	3305      	adds	r3, #5
 80015a6:	d111      	bne.n	80015cc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80015a8:	4b69      	ldr	r3, [pc, #420]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80015aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ac:	4b68      	ldr	r3, [pc, #416]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80015ae:	2104      	movs	r1, #4
 80015b0:	438a      	bics	r2, r1
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015b4:	4b66      	ldr	r3, [pc, #408]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80015b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b8:	22f8      	movs	r2, #248	; 0xf8
 80015ba:	4393      	bics	r3, r2
 80015bc:	0019      	movs	r1, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	00da      	lsls	r2, r3, #3
 80015c4:	4b62      	ldr	r3, [pc, #392]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80015c6:	430a      	orrs	r2, r1
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34
 80015ca:	e01e      	b.n	800160a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015cc:	4b60      	ldr	r3, [pc, #384]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80015ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d0:	4b5f      	ldr	r3, [pc, #380]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80015d2:	2104      	movs	r1, #4
 80015d4:	430a      	orrs	r2, r1
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80015d8:	4b5d      	ldr	r3, [pc, #372]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80015da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015dc:	4b5c      	ldr	r3, [pc, #368]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80015de:	2101      	movs	r1, #1
 80015e0:	438a      	bics	r2, r1
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	f7ff fb28 	bl	8000c38 <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015ee:	f7ff fb23 	bl	8000c38 <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e0a2      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001600:	4b53      	ldr	r3, [pc, #332]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d1f1      	bne.n	80015ee <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d100      	bne.n	8001614 <HAL_RCC_OscConfig+0x4e4>
 8001612:	e097      	b.n	8001744 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001614:	4b4e      	ldr	r3, [pc, #312]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	220c      	movs	r2, #12
 800161a:	4013      	ands	r3, r2
 800161c:	2b08      	cmp	r3, #8
 800161e:	d100      	bne.n	8001622 <HAL_RCC_OscConfig+0x4f2>
 8001620:	e06b      	b.n	80016fa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d14c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162a:	4b49      	ldr	r3, [pc, #292]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	4b48      	ldr	r3, [pc, #288]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001630:	494a      	ldr	r1, [pc, #296]	; (800175c <HAL_RCC_OscConfig+0x62c>)
 8001632:	400a      	ands	r2, r1
 8001634:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff faff 	bl	8000c38 <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff fafa 	bl	8000c38 <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e079      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001652:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	049b      	lsls	r3, r3, #18
 800165a:	4013      	ands	r3, r2
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800165e:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	220f      	movs	r2, #15
 8001664:	4393      	bics	r3, r2
 8001666:	0019      	movs	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800166c:	4b38      	ldr	r3, [pc, #224]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 800166e:	430a      	orrs	r2, r1
 8001670:	62da      	str	r2, [r3, #44]	; 0x2c
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4a3a      	ldr	r2, [pc, #232]	; (8001760 <HAL_RCC_OscConfig+0x630>)
 8001678:	4013      	ands	r3, r2
 800167a:	0019      	movs	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	431a      	orrs	r2, r3
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001688:	430a      	orrs	r2, r1
 800168a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800168c:	4b30      	ldr	r3, [pc, #192]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	0449      	lsls	r1, r1, #17
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff facd 	bl	8000c38 <HAL_GetTick>
 800169e:	0003      	movs	r3, r0
 80016a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a4:	f7ff fac8 	bl	8000c38 <HAL_GetTick>
 80016a8:	0002      	movs	r2, r0
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e047      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	049b      	lsls	r3, r3, #18
 80016be:	4013      	ands	r3, r2
 80016c0:	d0f0      	beq.n	80016a4 <HAL_RCC_OscConfig+0x574>
 80016c2:	e03f      	b.n	8001744 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b21      	ldr	r3, [pc, #132]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80016ca:	4924      	ldr	r1, [pc, #144]	; (800175c <HAL_RCC_OscConfig+0x62c>)
 80016cc:	400a      	ands	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7ff fab2 	bl	8000c38 <HAL_GetTick>
 80016d4:	0003      	movs	r3, r0
 80016d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff faad 	bl	8000c38 <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e02c      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	049b      	lsls	r3, r3, #18
 80016f4:	4013      	ands	r3, r2
 80016f6:	d1f0      	bne.n	80016da <HAL_RCC_OscConfig+0x5aa>
 80016f8:	e024      	b.n	8001744 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e01f      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_RCC_OscConfig+0x620>)
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	025b      	lsls	r3, r3, #9
 8001718:	401a      	ands	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	429a      	cmp	r2, r3
 8001720:	d10e      	bne.n	8001740 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	220f      	movs	r2, #15
 8001726:	401a      	ands	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d107      	bne.n	8001740 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	23f0      	movs	r3, #240	; 0xf0
 8001734:	039b      	lsls	r3, r3, #14
 8001736:	401a      	ands	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	0018      	movs	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	b008      	add	sp, #32
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	40021000 	.word	0x40021000
 8001754:	00001388 	.word	0x00001388
 8001758:	efffffff 	.word	0xefffffff
 800175c:	feffffff 	.word	0xfeffffff
 8001760:	ffc2ffff 	.word	0xffc2ffff

08001764 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b3      	b.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b5b      	ldr	r3, [pc, #364]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2201      	movs	r2, #1
 800177e:	4013      	ands	r3, r2
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d911      	bls.n	80017aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b58      	ldr	r3, [pc, #352]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2201      	movs	r2, #1
 800178c:	4393      	bics	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	4b55      	ldr	r3, [pc, #340]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001798:	4b53      	ldr	r3, [pc, #332]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2201      	movs	r2, #1
 800179e:	4013      	ands	r3, r2
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e09a      	b.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2202      	movs	r2, #2
 80017b0:	4013      	ands	r3, r2
 80017b2:	d015      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2204      	movs	r2, #4
 80017ba:	4013      	ands	r3, r2
 80017bc:	d006      	beq.n	80017cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017be:	4b4b      	ldr	r3, [pc, #300]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4b4a      	ldr	r3, [pc, #296]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80017c4:	21e0      	movs	r1, #224	; 0xe0
 80017c6:	00c9      	lsls	r1, r1, #3
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017cc:	4b47      	ldr	r3, [pc, #284]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	22f0      	movs	r2, #240	; 0xf0
 80017d2:	4393      	bics	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	4b44      	ldr	r3, [pc, #272]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80017dc:	430a      	orrs	r2, r1
 80017de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4013      	ands	r3, r2
 80017e8:	d040      	beq.n	800186c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	029b      	lsls	r3, r3, #10
 80017fa:	4013      	ands	r3, r2
 80017fc:	d114      	bne.n	8001828 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e06e      	b.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	049b      	lsls	r3, r3, #18
 8001812:	4013      	ands	r3, r2
 8001814:	d108      	bne.n	8001828 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e062      	b.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	4b34      	ldr	r3, [pc, #208]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e05b      	b.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001828:	4b30      	ldr	r3, [pc, #192]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2203      	movs	r2, #3
 800182e:	4393      	bics	r3, r2
 8001830:	0019      	movs	r1, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 8001838:	430a      	orrs	r2, r1
 800183a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff f9fc 	bl	8000c38 <HAL_GetTick>
 8001840:	0003      	movs	r3, r0
 8001842:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001844:	e009      	b.n	800185a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001846:	f7ff f9f7 	bl	8000c38 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <HAL_RCC_ClockConfig+0x18c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e042      	b.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	220c      	movs	r2, #12
 8001860:	401a      	ands	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	429a      	cmp	r2, r3
 800186a:	d1ec      	bne.n	8001846 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d211      	bcs.n	800189e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2201      	movs	r2, #1
 8001880:	4393      	bics	r3, r2
 8001882:	0019      	movs	r1, r3
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_RCC_ClockConfig+0x184>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2201      	movs	r2, #1
 8001892:	4013      	ands	r3, r2
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d001      	beq.n	800189e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e020      	b.n	80018e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2204      	movs	r2, #4
 80018a4:	4013      	ands	r3, r2
 80018a6:	d009      	beq.n	80018bc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018a8:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <HAL_RCC_ClockConfig+0x190>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80018b8:	430a      	orrs	r2, r1
 80018ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018bc:	f000 f820 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018c0:	0001      	movs	r1, r0
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_RCC_ClockConfig+0x188>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	091b      	lsrs	r3, r3, #4
 80018c8:	220f      	movs	r2, #15
 80018ca:	4013      	ands	r3, r2
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_RCC_ClockConfig+0x194>)
 80018ce:	5cd3      	ldrb	r3, [r2, r3]
 80018d0:	000a      	movs	r2, r1
 80018d2:	40da      	lsrs	r2, r3
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x198>)
 80018d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018d8:	2003      	movs	r0, #3
 80018da:	f7ff f967 	bl	8000bac <HAL_InitTick>
  
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	0018      	movs	r0, r3
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b004      	add	sp, #16
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40022000 	.word	0x40022000
 80018ec:	40021000 	.word	0x40021000
 80018f0:	00001388 	.word	0x00001388
 80018f4:	fffff8ff 	.word	0xfffff8ff
 80018f8:	08003154 	.word	0x08003154
 80018fc:	2000002c 	.word	0x2000002c

08001900 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b08f      	sub	sp, #60	; 0x3c
 8001904:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001906:	2314      	movs	r3, #20
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	4a2b      	ldr	r2, [pc, #172]	; (80019b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800190c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800190e:	c313      	stmia	r3!, {r0, r1, r4}
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	4a29      	ldr	r2, [pc, #164]	; (80019bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001918:	ca13      	ldmia	r2!, {r0, r1, r4}
 800191a:	c313      	stmia	r3!, {r0, r1, r4}
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001924:	2300      	movs	r3, #0
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
 8001928:	2300      	movs	r3, #0
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001934:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	220c      	movs	r2, #12
 800193e:	4013      	ands	r3, r2
 8001940:	2b04      	cmp	r3, #4
 8001942:	d002      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x4a>
 8001944:	2b08      	cmp	r3, #8
 8001946:	d003      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x50>
 8001948:	e02d      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800194c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800194e:	e02d      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001952:	0c9b      	lsrs	r3, r3, #18
 8001954:	220f      	movs	r2, #15
 8001956:	4013      	ands	r3, r2
 8001958:	2214      	movs	r2, #20
 800195a:	18ba      	adds	r2, r7, r2
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	220f      	movs	r2, #15
 8001966:	4013      	ands	r3, r2
 8001968:	1d3a      	adds	r2, r7, #4
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800196e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	025b      	lsls	r3, r3, #9
 8001974:	4013      	ands	r3, r2
 8001976:	d009      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800197a:	4812      	ldr	r0, [pc, #72]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800197c:	f7fe fbce 	bl	800011c <__udivsi3>
 8001980:	0003      	movs	r3, r0
 8001982:	001a      	movs	r2, r3
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	4353      	muls	r3, r2
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
 800198a:	e009      	b.n	80019a0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800198c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800198e:	000a      	movs	r2, r1
 8001990:	0152      	lsls	r2, r2, #5
 8001992:	1a52      	subs	r2, r2, r1
 8001994:	0193      	lsls	r3, r2, #6
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	185b      	adds	r3, r3, r1
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80019a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019a4:	e002      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80019ae:	0018      	movs	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b00f      	add	sp, #60	; 0x3c
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	08003134 	.word	0x08003134
 80019bc:	08003144 	.word	0x08003144
 80019c0:	40021000 	.word	0x40021000
 80019c4:	007a1200 	.word	0x007a1200

080019c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e0a8      	b.n	8001b2c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	2382      	movs	r3, #130	; 0x82
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d009      	beq.n	8001a02 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	61da      	str	r2, [r3, #28]
 80019f4:	e005      	b.n	8001a02 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	225d      	movs	r2, #93	; 0x5d
 8001a0c:	5c9b      	ldrb	r3, [r3, r2]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d107      	bne.n	8001a24 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	225c      	movs	r2, #92	; 0x5c
 8001a18:	2100      	movs	r1, #0
 8001a1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f7fe ff2a 	bl	8000878 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	225d      	movs	r2, #93	; 0x5d
 8001a28:	2102      	movs	r1, #2
 8001a2a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2140      	movs	r1, #64	; 0x40
 8001a38:	438a      	bics	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	23e0      	movs	r3, #224	; 0xe0
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d902      	bls.n	8001a4e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	e002      	b.n	8001a54 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	015b      	lsls	r3, r3, #5
 8001a52:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	23f0      	movs	r3, #240	; 0xf0
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d008      	beq.n	8001a72 <HAL_SPI_Init+0xaa>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	23e0      	movs	r3, #224	; 0xe0
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d002      	beq.n	8001a72 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	2382      	movs	r3, #130	; 0x82
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6899      	ldr	r1, [r3, #8]
 8001a80:	2384      	movs	r3, #132	; 0x84
 8001a82:	021b      	lsls	r3, r3, #8
 8001a84:	400b      	ands	r3, r1
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	400b      	ands	r3, r1
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	2101      	movs	r1, #1
 8001a98:	400b      	ands	r3, r1
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6999      	ldr	r1, [r3, #24]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	400b      	ands	r3, r1
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	2138      	movs	r1, #56	; 0x38
 8001aae:	400b      	ands	r3, r1
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	2180      	movs	r1, #128	; 0x80
 8001ab8:	400b      	ands	r3, r1
 8001aba:	431a      	orrs	r2, r3
 8001abc:	0011      	movs	r1, r2
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	019b      	lsls	r3, r3, #6
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	2204      	movs	r2, #4
 8001ad8:	401a      	ands	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	2110      	movs	r1, #16
 8001ae0:	400b      	ands	r3, r1
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae8:	2108      	movs	r1, #8
 8001aea:	400b      	ands	r3, r1
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68d9      	ldr	r1, [r3, #12]
 8001af2:	23f0      	movs	r3, #240	; 0xf0
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	400b      	ands	r3, r1
 8001af8:	431a      	orrs	r2, r3
 8001afa:	0011      	movs	r1, r2
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	015b      	lsls	r3, r3, #5
 8001b02:	401a      	ands	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	69da      	ldr	r2, [r3, #28]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4907      	ldr	r1, [pc, #28]	; (8001b34 <HAL_SPI_Init+0x16c>)
 8001b18:	400a      	ands	r2, r1
 8001b1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	225d      	movs	r2, #93	; 0x5d
 8001b26:	2101      	movs	r1, #1
 8001b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	b004      	add	sp, #16
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	fffff7ff 	.word	0xfffff7ff

08001b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e042      	b.n	8001bd0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	223d      	movs	r2, #61	; 0x3d
 8001b4e:	5c9b      	ldrb	r3, [r3, r2]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d107      	bne.n	8001b66 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	223c      	movs	r2, #60	; 0x3c
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7fe fed5 	bl	8000910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	223d      	movs	r2, #61	; 0x3d
 8001b6a:	2102      	movs	r1, #2
 8001b6c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3304      	adds	r3, #4
 8001b76:	0019      	movs	r1, r3
 8001b78:	0010      	movs	r0, r2
 8001b7a:	f000 f96b 	bl	8001e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2246      	movs	r2, #70	; 0x46
 8001b82:	2101      	movs	r1, #1
 8001b84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	223e      	movs	r2, #62	; 0x3e
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	5499      	strb	r1, [r3, r2]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	223f      	movs	r2, #63	; 0x3f
 8001b92:	2101      	movs	r1, #1
 8001b94:	5499      	strb	r1, [r3, r2]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2240      	movs	r2, #64	; 0x40
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	5499      	strb	r1, [r3, r2]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2241      	movs	r2, #65	; 0x41
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2242      	movs	r2, #66	; 0x42
 8001baa:	2101      	movs	r1, #1
 8001bac:	5499      	strb	r1, [r3, r2]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2243      	movs	r2, #67	; 0x43
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	5499      	strb	r1, [r3, r2]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2244      	movs	r2, #68	; 0x44
 8001bba:	2101      	movs	r1, #1
 8001bbc:	5499      	strb	r1, [r3, r2]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2245      	movs	r2, #69	; 0x45
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	223d      	movs	r2, #61	; 0x3d
 8001bca:	2101      	movs	r1, #1
 8001bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b002      	add	sp, #8
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d124      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d11d      	bne.n	8001c38 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2203      	movs	r2, #3
 8001c02:	4252      	negs	r2, r2
 8001c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	2203      	movs	r2, #3
 8001c14:	4013      	ands	r3, r2
 8001c16:	d004      	beq.n	8001c22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f000 f902 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001c20:	e007      	b.n	8001c32 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	0018      	movs	r0, r3
 8001c26:	f000 f8f5 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f000 f901 	bl	8001e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d125      	bne.n	8001c92 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2204      	movs	r2, #4
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d11e      	bne.n	8001c92 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2205      	movs	r2, #5
 8001c5a:	4252      	negs	r2, r2
 8001c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2202      	movs	r2, #2
 8001c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699a      	ldr	r2, [r3, #24]
 8001c6a:	23c0      	movs	r3, #192	; 0xc0
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4013      	ands	r3, r2
 8001c70:	d004      	beq.n	8001c7c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f000 f8d5 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001c7a:	e007      	b.n	8001c8c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f000 f8c8 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	0018      	movs	r0, r3
 8001c88:	f000 f8d4 	bl	8001e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2208      	movs	r2, #8
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d124      	bne.n	8001cea <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d11d      	bne.n	8001cea <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2209      	movs	r2, #9
 8001cb4:	4252      	negs	r2, r2
 8001cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2204      	movs	r2, #4
 8001cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 f8a9 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001cd2:	e007      	b.n	8001ce4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f000 f89c 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f000 f8a8 	bl	8001e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b10      	cmp	r3, #16
 8001cf6:	d125      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2210      	movs	r2, #16
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d11e      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2211      	movs	r2, #17
 8001d0c:	4252      	negs	r2, r2
 8001d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2208      	movs	r2, #8
 8001d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	23c0      	movs	r3, #192	; 0xc0
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4013      	ands	r3, r2
 8001d22:	d004      	beq.n	8001d2e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	0018      	movs	r0, r3
 8001d28:	f000 f87c 	bl	8001e24 <HAL_TIM_IC_CaptureCallback>
 8001d2c:	e007      	b.n	8001d3e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	0018      	movs	r0, r3
 8001d32:	f000 f86f 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f000 f87b 	bl	8001e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d10f      	bne.n	8001d72 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d108      	bne.n	8001d72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2202      	movs	r2, #2
 8001d66:	4252      	negs	r2, r2
 8001d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f000 f849 	bl	8001e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b80      	cmp	r3, #128	; 0x80
 8001d7e:	d10f      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2280      	movs	r2, #128	; 0x80
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b80      	cmp	r3, #128	; 0x80
 8001d8c:	d108      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2281      	movs	r2, #129	; 0x81
 8001d94:	4252      	negs	r2, r2
 8001d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f000 f8ce 	bl	8001f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	2240      	movs	r2, #64	; 0x40
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b40      	cmp	r3, #64	; 0x40
 8001dac:	d10f      	bne.n	8001dce <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2240      	movs	r2, #64	; 0x40
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b40      	cmp	r3, #64	; 0x40
 8001dba:	d108      	bne.n	8001dce <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2241      	movs	r2, #65	; 0x41
 8001dc2:	4252      	negs	r2, r2
 8001dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f000 f83b 	bl	8001e44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	d10f      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2220      	movs	r2, #32
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b20      	cmp	r3, #32
 8001de8:	d108      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2221      	movs	r2, #33	; 0x21
 8001df0:	4252      	negs	r2, r2
 8001df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 f898 	bl	8001f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b002      	add	sp, #8
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001e0c:	46c0      	nop			; (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b002      	add	sp, #8
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e1c:	46c0      	nop			; (mov r8, r8)
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b002      	add	sp, #8
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b002      	add	sp, #8
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e3c:	46c0      	nop			; (mov r8, r8)
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b002      	add	sp, #8
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e4c:	46c0      	nop			; (mov r8, r8)
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b002      	add	sp, #8
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a2b      	ldr	r2, [pc, #172]	; (8001f14 <TIM_Base_SetConfig+0xc0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d003      	beq.n	8001e74 <TIM_Base_SetConfig+0x20>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a2a      	ldr	r2, [pc, #168]	; (8001f18 <TIM_Base_SetConfig+0xc4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d108      	bne.n	8001e86 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2270      	movs	r2, #112	; 0x70
 8001e78:	4393      	bics	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <TIM_Base_SetConfig+0xc0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d00f      	beq.n	8001eae <TIM_Base_SetConfig+0x5a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a21      	ldr	r2, [pc, #132]	; (8001f18 <TIM_Base_SetConfig+0xc4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00b      	beq.n	8001eae <TIM_Base_SetConfig+0x5a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a20      	ldr	r2, [pc, #128]	; (8001f1c <TIM_Base_SetConfig+0xc8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d007      	beq.n	8001eae <TIM_Base_SetConfig+0x5a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <TIM_Base_SetConfig+0xcc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d003      	beq.n	8001eae <TIM_Base_SetConfig+0x5a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a1e      	ldr	r2, [pc, #120]	; (8001f24 <TIM_Base_SetConfig+0xd0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d108      	bne.n	8001ec0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <TIM_Base_SetConfig+0xd4>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	4393      	bics	r3, r2
 8001ec6:	001a      	movs	r2, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <TIM_Base_SetConfig+0xc0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <TIM_Base_SetConfig+0xaa>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <TIM_Base_SetConfig+0xcc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d003      	beq.n	8001efe <TIM_Base_SetConfig+0xaa>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <TIM_Base_SetConfig+0xd0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d103      	bne.n	8001f06 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	691a      	ldr	r2, [r3, #16]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	615a      	str	r2, [r3, #20]
}
 8001f0c:	46c0      	nop			; (mov r8, r8)
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b004      	add	sp, #16
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40012c00 	.word	0x40012c00
 8001f18:	40000400 	.word	0x40000400
 8001f1c:	40002000 	.word	0x40002000
 8001f20:	40014400 	.word	0x40014400
 8001f24:	40014800 	.word	0x40014800
 8001f28:	fffffcff 	.word	0xfffffcff

08001f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b002      	add	sp, #8
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <__errno>:
 8001f4c:	4b01      	ldr	r3, [pc, #4]	; (8001f54 <__errno+0x8>)
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	4770      	bx	lr
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	20000038 	.word	0x20000038

08001f58 <__libc_init_array>:
 8001f58:	b570      	push	{r4, r5, r6, lr}
 8001f5a:	2600      	movs	r6, #0
 8001f5c:	4d0c      	ldr	r5, [pc, #48]	; (8001f90 <__libc_init_array+0x38>)
 8001f5e:	4c0d      	ldr	r4, [pc, #52]	; (8001f94 <__libc_init_array+0x3c>)
 8001f60:	1b64      	subs	r4, r4, r5
 8001f62:	10a4      	asrs	r4, r4, #2
 8001f64:	42a6      	cmp	r6, r4
 8001f66:	d109      	bne.n	8001f7c <__libc_init_array+0x24>
 8001f68:	2600      	movs	r6, #0
 8001f6a:	f001 f8d7 	bl	800311c <_init>
 8001f6e:	4d0a      	ldr	r5, [pc, #40]	; (8001f98 <__libc_init_array+0x40>)
 8001f70:	4c0a      	ldr	r4, [pc, #40]	; (8001f9c <__libc_init_array+0x44>)
 8001f72:	1b64      	subs	r4, r4, r5
 8001f74:	10a4      	asrs	r4, r4, #2
 8001f76:	42a6      	cmp	r6, r4
 8001f78:	d105      	bne.n	8001f86 <__libc_init_array+0x2e>
 8001f7a:	bd70      	pop	{r4, r5, r6, pc}
 8001f7c:	00b3      	lsls	r3, r6, #2
 8001f7e:	58eb      	ldr	r3, [r5, r3]
 8001f80:	4798      	blx	r3
 8001f82:	3601      	adds	r6, #1
 8001f84:	e7ee      	b.n	8001f64 <__libc_init_array+0xc>
 8001f86:	00b3      	lsls	r3, r6, #2
 8001f88:	58eb      	ldr	r3, [r5, r3]
 8001f8a:	4798      	blx	r3
 8001f8c:	3601      	adds	r6, #1
 8001f8e:	e7f2      	b.n	8001f76 <__libc_init_array+0x1e>
 8001f90:	080032ac 	.word	0x080032ac
 8001f94:	080032ac 	.word	0x080032ac
 8001f98:	080032ac 	.word	0x080032ac
 8001f9c:	080032b0 	.word	0x080032b0

08001fa0 <memset>:
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	1882      	adds	r2, r0, r2
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d100      	bne.n	8001faa <memset+0xa>
 8001fa8:	4770      	bx	lr
 8001faa:	7019      	strb	r1, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	e7f9      	b.n	8001fa4 <memset+0x4>

08001fb0 <srand>:
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <srand+0x48>)
 8001fb2:	b570      	push	{r4, r5, r6, lr}
 8001fb4:	681d      	ldr	r5, [r3, #0]
 8001fb6:	0004      	movs	r4, r0
 8001fb8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <srand+0x3c>
 8001fbe:	2018      	movs	r0, #24
 8001fc0:	f000 f892 	bl	80020e8 <malloc>
 8001fc4:	1e02      	subs	r2, r0, #0
 8001fc6:	63a8      	str	r0, [r5, #56]	; 0x38
 8001fc8:	d104      	bne.n	8001fd4 <srand+0x24>
 8001fca:	2142      	movs	r1, #66	; 0x42
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <srand+0x4c>)
 8001fce:	480c      	ldr	r0, [pc, #48]	; (8002000 <srand+0x50>)
 8001fd0:	f000 f85c 	bl	800208c <__assert_func>
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <srand+0x54>)
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	6003      	str	r3, [r0, #0]
 8001fda:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <srand+0x58>)
 8001fdc:	6043      	str	r3, [r0, #4]
 8001fde:	4b0b      	ldr	r3, [pc, #44]	; (800200c <srand+0x5c>)
 8001fe0:	6083      	str	r3, [r0, #8]
 8001fe2:	230b      	movs	r3, #11
 8001fe4:	8183      	strh	r3, [r0, #12]
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	6110      	str	r0, [r2, #16]
 8001fea:	6151      	str	r1, [r2, #20]
 8001fec:	2200      	movs	r2, #0
 8001fee:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001ff0:	611c      	str	r4, [r3, #16]
 8001ff2:	615a      	str	r2, [r3, #20]
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	20000038 	.word	0x20000038
 8001ffc:	08003168 	.word	0x08003168
 8002000:	0800317f 	.word	0x0800317f
 8002004:	abcd330e 	.word	0xabcd330e
 8002008:	e66d1234 	.word	0xe66d1234
 800200c:	0005deec 	.word	0x0005deec

08002010 <rand>:
 8002010:	4b16      	ldr	r3, [pc, #88]	; (800206c <rand+0x5c>)
 8002012:	b510      	push	{r4, lr}
 8002014:	681c      	ldr	r4, [r3, #0]
 8002016:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002018:	2b00      	cmp	r3, #0
 800201a:	d116      	bne.n	800204a <rand+0x3a>
 800201c:	2018      	movs	r0, #24
 800201e:	f000 f863 	bl	80020e8 <malloc>
 8002022:	1e02      	subs	r2, r0, #0
 8002024:	63a0      	str	r0, [r4, #56]	; 0x38
 8002026:	d104      	bne.n	8002032 <rand+0x22>
 8002028:	214e      	movs	r1, #78	; 0x4e
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <rand+0x60>)
 800202c:	4811      	ldr	r0, [pc, #68]	; (8002074 <rand+0x64>)
 800202e:	f000 f82d 	bl	800208c <__assert_func>
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <rand+0x68>)
 8002034:	2100      	movs	r1, #0
 8002036:	6003      	str	r3, [r0, #0]
 8002038:	4b10      	ldr	r3, [pc, #64]	; (800207c <rand+0x6c>)
 800203a:	6043      	str	r3, [r0, #4]
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <rand+0x70>)
 800203e:	6083      	str	r3, [r0, #8]
 8002040:	230b      	movs	r3, #11
 8002042:	8183      	strh	r3, [r0, #12]
 8002044:	2001      	movs	r0, #1
 8002046:	6110      	str	r0, [r2, #16]
 8002048:	6151      	str	r1, [r2, #20]
 800204a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800204c:	4a0d      	ldr	r2, [pc, #52]	; (8002084 <rand+0x74>)
 800204e:	6920      	ldr	r0, [r4, #16]
 8002050:	6961      	ldr	r1, [r4, #20]
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <rand+0x78>)
 8002054:	f7fe f8ee 	bl	8000234 <__aeabi_lmul>
 8002058:	2201      	movs	r2, #1
 800205a:	2300      	movs	r3, #0
 800205c:	1880      	adds	r0, r0, r2
 800205e:	4159      	adcs	r1, r3
 8002060:	6120      	str	r0, [r4, #16]
 8002062:	6161      	str	r1, [r4, #20]
 8002064:	0048      	lsls	r0, r1, #1
 8002066:	0840      	lsrs	r0, r0, #1
 8002068:	bd10      	pop	{r4, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	20000038 	.word	0x20000038
 8002070:	08003168 	.word	0x08003168
 8002074:	0800317f 	.word	0x0800317f
 8002078:	abcd330e 	.word	0xabcd330e
 800207c:	e66d1234 	.word	0xe66d1234
 8002080:	0005deec 	.word	0x0005deec
 8002084:	4c957f2d 	.word	0x4c957f2d
 8002088:	5851f42d 	.word	0x5851f42d

0800208c <__assert_func>:
 800208c:	b530      	push	{r4, r5, lr}
 800208e:	0014      	movs	r4, r2
 8002090:	001a      	movs	r2, r3
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <__assert_func+0x2c>)
 8002094:	0005      	movs	r5, r0
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	b085      	sub	sp, #20
 800209a:	68d8      	ldr	r0, [r3, #12]
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <__assert_func+0x30>)
 800209e:	2c00      	cmp	r4, #0
 80020a0:	d101      	bne.n	80020a6 <__assert_func+0x1a>
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <__assert_func+0x34>)
 80020a4:	001c      	movs	r4, r3
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	9100      	str	r1, [sp, #0]
 80020aa:	002b      	movs	r3, r5
 80020ac:	4905      	ldr	r1, [pc, #20]	; (80020c4 <__assert_func+0x38>)
 80020ae:	9402      	str	r4, [sp, #8]
 80020b0:	f000 f80a 	bl	80020c8 <fiprintf>
 80020b4:	f000 fcc8 	bl	8002a48 <abort>
 80020b8:	20000038 	.word	0x20000038
 80020bc:	080031da 	.word	0x080031da
 80020c0:	08003215 	.word	0x08003215
 80020c4:	080031e7 	.word	0x080031e7

080020c8 <fiprintf>:
 80020c8:	b40e      	push	{r1, r2, r3}
 80020ca:	b503      	push	{r0, r1, lr}
 80020cc:	0001      	movs	r1, r0
 80020ce:	ab03      	add	r3, sp, #12
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <fiprintf+0x1c>)
 80020d2:	cb04      	ldmia	r3!, {r2}
 80020d4:	6800      	ldr	r0, [r0, #0]
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	f000 f91a 	bl	8002310 <_vfiprintf_r>
 80020dc:	b002      	add	sp, #8
 80020de:	bc08      	pop	{r3}
 80020e0:	b003      	add	sp, #12
 80020e2:	4718      	bx	r3
 80020e4:	20000038 	.word	0x20000038

080020e8 <malloc>:
 80020e8:	b510      	push	{r4, lr}
 80020ea:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <malloc+0x10>)
 80020ec:	0001      	movs	r1, r0
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	f000 f870 	bl	80021d4 <_malloc_r>
 80020f4:	bd10      	pop	{r4, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	20000038 	.word	0x20000038

080020fc <_free_r>:
 80020fc:	b570      	push	{r4, r5, r6, lr}
 80020fe:	0005      	movs	r5, r0
 8002100:	2900      	cmp	r1, #0
 8002102:	d010      	beq.n	8002126 <_free_r+0x2a>
 8002104:	1f0c      	subs	r4, r1, #4
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	da00      	bge.n	800210e <_free_r+0x12>
 800210c:	18e4      	adds	r4, r4, r3
 800210e:	0028      	movs	r0, r5
 8002110:	f000 feec 	bl	8002eec <__malloc_lock>
 8002114:	4a1d      	ldr	r2, [pc, #116]	; (800218c <_free_r+0x90>)
 8002116:	6813      	ldr	r3, [r2, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d105      	bne.n	8002128 <_free_r+0x2c>
 800211c:	6063      	str	r3, [r4, #4]
 800211e:	6014      	str	r4, [r2, #0]
 8002120:	0028      	movs	r0, r5
 8002122:	f000 feeb 	bl	8002efc <__malloc_unlock>
 8002126:	bd70      	pop	{r4, r5, r6, pc}
 8002128:	42a3      	cmp	r3, r4
 800212a:	d908      	bls.n	800213e <_free_r+0x42>
 800212c:	6821      	ldr	r1, [r4, #0]
 800212e:	1860      	adds	r0, r4, r1
 8002130:	4283      	cmp	r3, r0
 8002132:	d1f3      	bne.n	800211c <_free_r+0x20>
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	1841      	adds	r1, r0, r1
 800213a:	6021      	str	r1, [r4, #0]
 800213c:	e7ee      	b.n	800211c <_free_r+0x20>
 800213e:	001a      	movs	r2, r3
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <_free_r+0x4e>
 8002146:	42a3      	cmp	r3, r4
 8002148:	d9f9      	bls.n	800213e <_free_r+0x42>
 800214a:	6811      	ldr	r1, [r2, #0]
 800214c:	1850      	adds	r0, r2, r1
 800214e:	42a0      	cmp	r0, r4
 8002150:	d10b      	bne.n	800216a <_free_r+0x6e>
 8002152:	6820      	ldr	r0, [r4, #0]
 8002154:	1809      	adds	r1, r1, r0
 8002156:	1850      	adds	r0, r2, r1
 8002158:	6011      	str	r1, [r2, #0]
 800215a:	4283      	cmp	r3, r0
 800215c:	d1e0      	bne.n	8002120 <_free_r+0x24>
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	1841      	adds	r1, r0, r1
 8002164:	6011      	str	r1, [r2, #0]
 8002166:	6053      	str	r3, [r2, #4]
 8002168:	e7da      	b.n	8002120 <_free_r+0x24>
 800216a:	42a0      	cmp	r0, r4
 800216c:	d902      	bls.n	8002174 <_free_r+0x78>
 800216e:	230c      	movs	r3, #12
 8002170:	602b      	str	r3, [r5, #0]
 8002172:	e7d5      	b.n	8002120 <_free_r+0x24>
 8002174:	6821      	ldr	r1, [r4, #0]
 8002176:	1860      	adds	r0, r4, r1
 8002178:	4283      	cmp	r3, r0
 800217a:	d103      	bne.n	8002184 <_free_r+0x88>
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	1841      	adds	r1, r0, r1
 8002182:	6021      	str	r1, [r4, #0]
 8002184:	6063      	str	r3, [r4, #4]
 8002186:	6054      	str	r4, [r2, #4]
 8002188:	e7ca      	b.n	8002120 <_free_r+0x24>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	2000016c 	.word	0x2000016c

08002190 <sbrk_aligned>:
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	4e0f      	ldr	r6, [pc, #60]	; (80021d0 <sbrk_aligned+0x40>)
 8002194:	000d      	movs	r5, r1
 8002196:	6831      	ldr	r1, [r6, #0]
 8002198:	0004      	movs	r4, r0
 800219a:	2900      	cmp	r1, #0
 800219c:	d102      	bne.n	80021a4 <sbrk_aligned+0x14>
 800219e:	f000 fb73 	bl	8002888 <_sbrk_r>
 80021a2:	6030      	str	r0, [r6, #0]
 80021a4:	0029      	movs	r1, r5
 80021a6:	0020      	movs	r0, r4
 80021a8:	f000 fb6e 	bl	8002888 <_sbrk_r>
 80021ac:	1c43      	adds	r3, r0, #1
 80021ae:	d00a      	beq.n	80021c6 <sbrk_aligned+0x36>
 80021b0:	2303      	movs	r3, #3
 80021b2:	1cc5      	adds	r5, r0, #3
 80021b4:	439d      	bics	r5, r3
 80021b6:	42a8      	cmp	r0, r5
 80021b8:	d007      	beq.n	80021ca <sbrk_aligned+0x3a>
 80021ba:	1a29      	subs	r1, r5, r0
 80021bc:	0020      	movs	r0, r4
 80021be:	f000 fb63 	bl	8002888 <_sbrk_r>
 80021c2:	1c43      	adds	r3, r0, #1
 80021c4:	d101      	bne.n	80021ca <sbrk_aligned+0x3a>
 80021c6:	2501      	movs	r5, #1
 80021c8:	426d      	negs	r5, r5
 80021ca:	0028      	movs	r0, r5
 80021cc:	bd70      	pop	{r4, r5, r6, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	20000170 	.word	0x20000170

080021d4 <_malloc_r>:
 80021d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021d6:	2203      	movs	r2, #3
 80021d8:	1ccb      	adds	r3, r1, #3
 80021da:	4393      	bics	r3, r2
 80021dc:	3308      	adds	r3, #8
 80021de:	0006      	movs	r6, r0
 80021e0:	001f      	movs	r7, r3
 80021e2:	2b0c      	cmp	r3, #12
 80021e4:	d232      	bcs.n	800224c <_malloc_r+0x78>
 80021e6:	270c      	movs	r7, #12
 80021e8:	42b9      	cmp	r1, r7
 80021ea:	d831      	bhi.n	8002250 <_malloc_r+0x7c>
 80021ec:	0030      	movs	r0, r6
 80021ee:	f000 fe7d 	bl	8002eec <__malloc_lock>
 80021f2:	4d32      	ldr	r5, [pc, #200]	; (80022bc <_malloc_r+0xe8>)
 80021f4:	682b      	ldr	r3, [r5, #0]
 80021f6:	001c      	movs	r4, r3
 80021f8:	2c00      	cmp	r4, #0
 80021fa:	d12e      	bne.n	800225a <_malloc_r+0x86>
 80021fc:	0039      	movs	r1, r7
 80021fe:	0030      	movs	r0, r6
 8002200:	f7ff ffc6 	bl	8002190 <sbrk_aligned>
 8002204:	0004      	movs	r4, r0
 8002206:	1c43      	adds	r3, r0, #1
 8002208:	d11e      	bne.n	8002248 <_malloc_r+0x74>
 800220a:	682c      	ldr	r4, [r5, #0]
 800220c:	0025      	movs	r5, r4
 800220e:	2d00      	cmp	r5, #0
 8002210:	d14a      	bne.n	80022a8 <_malloc_r+0xd4>
 8002212:	6823      	ldr	r3, [r4, #0]
 8002214:	0029      	movs	r1, r5
 8002216:	18e3      	adds	r3, r4, r3
 8002218:	0030      	movs	r0, r6
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	f000 fb34 	bl	8002888 <_sbrk_r>
 8002220:	9b01      	ldr	r3, [sp, #4]
 8002222:	4283      	cmp	r3, r0
 8002224:	d143      	bne.n	80022ae <_malloc_r+0xda>
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	3703      	adds	r7, #3
 800222a:	1aff      	subs	r7, r7, r3
 800222c:	2303      	movs	r3, #3
 800222e:	439f      	bics	r7, r3
 8002230:	3708      	adds	r7, #8
 8002232:	2f0c      	cmp	r7, #12
 8002234:	d200      	bcs.n	8002238 <_malloc_r+0x64>
 8002236:	270c      	movs	r7, #12
 8002238:	0039      	movs	r1, r7
 800223a:	0030      	movs	r0, r6
 800223c:	f7ff ffa8 	bl	8002190 <sbrk_aligned>
 8002240:	1c43      	adds	r3, r0, #1
 8002242:	d034      	beq.n	80022ae <_malloc_r+0xda>
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	19df      	adds	r7, r3, r7
 8002248:	6027      	str	r7, [r4, #0]
 800224a:	e013      	b.n	8002274 <_malloc_r+0xa0>
 800224c:	2b00      	cmp	r3, #0
 800224e:	dacb      	bge.n	80021e8 <_malloc_r+0x14>
 8002250:	230c      	movs	r3, #12
 8002252:	2500      	movs	r5, #0
 8002254:	6033      	str	r3, [r6, #0]
 8002256:	0028      	movs	r0, r5
 8002258:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800225a:	6822      	ldr	r2, [r4, #0]
 800225c:	1bd1      	subs	r1, r2, r7
 800225e:	d420      	bmi.n	80022a2 <_malloc_r+0xce>
 8002260:	290b      	cmp	r1, #11
 8002262:	d917      	bls.n	8002294 <_malloc_r+0xc0>
 8002264:	19e2      	adds	r2, r4, r7
 8002266:	6027      	str	r7, [r4, #0]
 8002268:	42a3      	cmp	r3, r4
 800226a:	d111      	bne.n	8002290 <_malloc_r+0xbc>
 800226c:	602a      	str	r2, [r5, #0]
 800226e:	6863      	ldr	r3, [r4, #4]
 8002270:	6011      	str	r1, [r2, #0]
 8002272:	6053      	str	r3, [r2, #4]
 8002274:	0030      	movs	r0, r6
 8002276:	0025      	movs	r5, r4
 8002278:	f000 fe40 	bl	8002efc <__malloc_unlock>
 800227c:	2207      	movs	r2, #7
 800227e:	350b      	adds	r5, #11
 8002280:	1d23      	adds	r3, r4, #4
 8002282:	4395      	bics	r5, r2
 8002284:	1aea      	subs	r2, r5, r3
 8002286:	429d      	cmp	r5, r3
 8002288:	d0e5      	beq.n	8002256 <_malloc_r+0x82>
 800228a:	1b5b      	subs	r3, r3, r5
 800228c:	50a3      	str	r3, [r4, r2]
 800228e:	e7e2      	b.n	8002256 <_malloc_r+0x82>
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	e7ec      	b.n	800226e <_malloc_r+0x9a>
 8002294:	6862      	ldr	r2, [r4, #4]
 8002296:	42a3      	cmp	r3, r4
 8002298:	d101      	bne.n	800229e <_malloc_r+0xca>
 800229a:	602a      	str	r2, [r5, #0]
 800229c:	e7ea      	b.n	8002274 <_malloc_r+0xa0>
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	e7e8      	b.n	8002274 <_malloc_r+0xa0>
 80022a2:	0023      	movs	r3, r4
 80022a4:	6864      	ldr	r4, [r4, #4]
 80022a6:	e7a7      	b.n	80021f8 <_malloc_r+0x24>
 80022a8:	002c      	movs	r4, r5
 80022aa:	686d      	ldr	r5, [r5, #4]
 80022ac:	e7af      	b.n	800220e <_malloc_r+0x3a>
 80022ae:	230c      	movs	r3, #12
 80022b0:	0030      	movs	r0, r6
 80022b2:	6033      	str	r3, [r6, #0]
 80022b4:	f000 fe22 	bl	8002efc <__malloc_unlock>
 80022b8:	e7cd      	b.n	8002256 <_malloc_r+0x82>
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	2000016c 	.word	0x2000016c

080022c0 <__sfputc_r>:
 80022c0:	6893      	ldr	r3, [r2, #8]
 80022c2:	b510      	push	{r4, lr}
 80022c4:	3b01      	subs	r3, #1
 80022c6:	6093      	str	r3, [r2, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da04      	bge.n	80022d6 <__sfputc_r+0x16>
 80022cc:	6994      	ldr	r4, [r2, #24]
 80022ce:	42a3      	cmp	r3, r4
 80022d0:	db07      	blt.n	80022e2 <__sfputc_r+0x22>
 80022d2:	290a      	cmp	r1, #10
 80022d4:	d005      	beq.n	80022e2 <__sfputc_r+0x22>
 80022d6:	6813      	ldr	r3, [r2, #0]
 80022d8:	1c58      	adds	r0, r3, #1
 80022da:	6010      	str	r0, [r2, #0]
 80022dc:	7019      	strb	r1, [r3, #0]
 80022de:	0008      	movs	r0, r1
 80022e0:	bd10      	pop	{r4, pc}
 80022e2:	f000 fae3 	bl	80028ac <__swbuf_r>
 80022e6:	0001      	movs	r1, r0
 80022e8:	e7f9      	b.n	80022de <__sfputc_r+0x1e>

080022ea <__sfputs_r>:
 80022ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ec:	0006      	movs	r6, r0
 80022ee:	000f      	movs	r7, r1
 80022f0:	0014      	movs	r4, r2
 80022f2:	18d5      	adds	r5, r2, r3
 80022f4:	42ac      	cmp	r4, r5
 80022f6:	d101      	bne.n	80022fc <__sfputs_r+0x12>
 80022f8:	2000      	movs	r0, #0
 80022fa:	e007      	b.n	800230c <__sfputs_r+0x22>
 80022fc:	7821      	ldrb	r1, [r4, #0]
 80022fe:	003a      	movs	r2, r7
 8002300:	0030      	movs	r0, r6
 8002302:	f7ff ffdd 	bl	80022c0 <__sfputc_r>
 8002306:	3401      	adds	r4, #1
 8002308:	1c43      	adds	r3, r0, #1
 800230a:	d1f3      	bne.n	80022f4 <__sfputs_r+0xa>
 800230c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002310 <_vfiprintf_r>:
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	b0a1      	sub	sp, #132	; 0x84
 8002314:	0006      	movs	r6, r0
 8002316:	000c      	movs	r4, r1
 8002318:	001f      	movs	r7, r3
 800231a:	9203      	str	r2, [sp, #12]
 800231c:	2800      	cmp	r0, #0
 800231e:	d004      	beq.n	800232a <_vfiprintf_r+0x1a>
 8002320:	6983      	ldr	r3, [r0, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <_vfiprintf_r+0x1a>
 8002326:	f000 fcc5 	bl	8002cb4 <__sinit>
 800232a:	4b8e      	ldr	r3, [pc, #568]	; (8002564 <_vfiprintf_r+0x254>)
 800232c:	429c      	cmp	r4, r3
 800232e:	d11c      	bne.n	800236a <_vfiprintf_r+0x5a>
 8002330:	6874      	ldr	r4, [r6, #4]
 8002332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002334:	07db      	lsls	r3, r3, #31
 8002336:	d405      	bmi.n	8002344 <_vfiprintf_r+0x34>
 8002338:	89a3      	ldrh	r3, [r4, #12]
 800233a:	059b      	lsls	r3, r3, #22
 800233c:	d402      	bmi.n	8002344 <_vfiprintf_r+0x34>
 800233e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002340:	f000 fd59 	bl	8002df6 <__retarget_lock_acquire_recursive>
 8002344:	89a3      	ldrh	r3, [r4, #12]
 8002346:	071b      	lsls	r3, r3, #28
 8002348:	d502      	bpl.n	8002350 <_vfiprintf_r+0x40>
 800234a:	6923      	ldr	r3, [r4, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d11d      	bne.n	800238c <_vfiprintf_r+0x7c>
 8002350:	0021      	movs	r1, r4
 8002352:	0030      	movs	r0, r6
 8002354:	f000 fb00 	bl	8002958 <__swsetup_r>
 8002358:	2800      	cmp	r0, #0
 800235a:	d017      	beq.n	800238c <_vfiprintf_r+0x7c>
 800235c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800235e:	07db      	lsls	r3, r3, #31
 8002360:	d50d      	bpl.n	800237e <_vfiprintf_r+0x6e>
 8002362:	2001      	movs	r0, #1
 8002364:	4240      	negs	r0, r0
 8002366:	b021      	add	sp, #132	; 0x84
 8002368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800236a:	4b7f      	ldr	r3, [pc, #508]	; (8002568 <_vfiprintf_r+0x258>)
 800236c:	429c      	cmp	r4, r3
 800236e:	d101      	bne.n	8002374 <_vfiprintf_r+0x64>
 8002370:	68b4      	ldr	r4, [r6, #8]
 8002372:	e7de      	b.n	8002332 <_vfiprintf_r+0x22>
 8002374:	4b7d      	ldr	r3, [pc, #500]	; (800256c <_vfiprintf_r+0x25c>)
 8002376:	429c      	cmp	r4, r3
 8002378:	d1db      	bne.n	8002332 <_vfiprintf_r+0x22>
 800237a:	68f4      	ldr	r4, [r6, #12]
 800237c:	e7d9      	b.n	8002332 <_vfiprintf_r+0x22>
 800237e:	89a3      	ldrh	r3, [r4, #12]
 8002380:	059b      	lsls	r3, r3, #22
 8002382:	d4ee      	bmi.n	8002362 <_vfiprintf_r+0x52>
 8002384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002386:	f000 fd37 	bl	8002df8 <__retarget_lock_release_recursive>
 800238a:	e7ea      	b.n	8002362 <_vfiprintf_r+0x52>
 800238c:	2300      	movs	r3, #0
 800238e:	ad08      	add	r5, sp, #32
 8002390:	616b      	str	r3, [r5, #20]
 8002392:	3320      	adds	r3, #32
 8002394:	766b      	strb	r3, [r5, #25]
 8002396:	3310      	adds	r3, #16
 8002398:	76ab      	strb	r3, [r5, #26]
 800239a:	9707      	str	r7, [sp, #28]
 800239c:	9f03      	ldr	r7, [sp, #12]
 800239e:	783b      	ldrb	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <_vfiprintf_r+0x98>
 80023a4:	2b25      	cmp	r3, #37	; 0x25
 80023a6:	d14e      	bne.n	8002446 <_vfiprintf_r+0x136>
 80023a8:	9b03      	ldr	r3, [sp, #12]
 80023aa:	1afb      	subs	r3, r7, r3
 80023ac:	9305      	str	r3, [sp, #20]
 80023ae:	9b03      	ldr	r3, [sp, #12]
 80023b0:	429f      	cmp	r7, r3
 80023b2:	d00d      	beq.n	80023d0 <_vfiprintf_r+0xc0>
 80023b4:	9b05      	ldr	r3, [sp, #20]
 80023b6:	0021      	movs	r1, r4
 80023b8:	0030      	movs	r0, r6
 80023ba:	9a03      	ldr	r2, [sp, #12]
 80023bc:	f7ff ff95 	bl	80022ea <__sfputs_r>
 80023c0:	1c43      	adds	r3, r0, #1
 80023c2:	d100      	bne.n	80023c6 <_vfiprintf_r+0xb6>
 80023c4:	e0b5      	b.n	8002532 <_vfiprintf_r+0x222>
 80023c6:	696a      	ldr	r2, [r5, #20]
 80023c8:	9b05      	ldr	r3, [sp, #20]
 80023ca:	4694      	mov	ip, r2
 80023cc:	4463      	add	r3, ip
 80023ce:	616b      	str	r3, [r5, #20]
 80023d0:	783b      	ldrb	r3, [r7, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d100      	bne.n	80023d8 <_vfiprintf_r+0xc8>
 80023d6:	e0ac      	b.n	8002532 <_vfiprintf_r+0x222>
 80023d8:	2201      	movs	r2, #1
 80023da:	1c7b      	adds	r3, r7, #1
 80023dc:	9303      	str	r3, [sp, #12]
 80023de:	2300      	movs	r3, #0
 80023e0:	4252      	negs	r2, r2
 80023e2:	606a      	str	r2, [r5, #4]
 80023e4:	a904      	add	r1, sp, #16
 80023e6:	3254      	adds	r2, #84	; 0x54
 80023e8:	1852      	adds	r2, r2, r1
 80023ea:	602b      	str	r3, [r5, #0]
 80023ec:	60eb      	str	r3, [r5, #12]
 80023ee:	60ab      	str	r3, [r5, #8]
 80023f0:	7013      	strb	r3, [r2, #0]
 80023f2:	65ab      	str	r3, [r5, #88]	; 0x58
 80023f4:	9b03      	ldr	r3, [sp, #12]
 80023f6:	2205      	movs	r2, #5
 80023f8:	7819      	ldrb	r1, [r3, #0]
 80023fa:	485d      	ldr	r0, [pc, #372]	; (8002570 <_vfiprintf_r+0x260>)
 80023fc:	f000 fd6a 	bl	8002ed4 <memchr>
 8002400:	9b03      	ldr	r3, [sp, #12]
 8002402:	1c5f      	adds	r7, r3, #1
 8002404:	2800      	cmp	r0, #0
 8002406:	d120      	bne.n	800244a <_vfiprintf_r+0x13a>
 8002408:	682a      	ldr	r2, [r5, #0]
 800240a:	06d3      	lsls	r3, r2, #27
 800240c:	d504      	bpl.n	8002418 <_vfiprintf_r+0x108>
 800240e:	2353      	movs	r3, #83	; 0x53
 8002410:	a904      	add	r1, sp, #16
 8002412:	185b      	adds	r3, r3, r1
 8002414:	2120      	movs	r1, #32
 8002416:	7019      	strb	r1, [r3, #0]
 8002418:	0713      	lsls	r3, r2, #28
 800241a:	d504      	bpl.n	8002426 <_vfiprintf_r+0x116>
 800241c:	2353      	movs	r3, #83	; 0x53
 800241e:	a904      	add	r1, sp, #16
 8002420:	185b      	adds	r3, r3, r1
 8002422:	212b      	movs	r1, #43	; 0x2b
 8002424:	7019      	strb	r1, [r3, #0]
 8002426:	9b03      	ldr	r3, [sp, #12]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b2a      	cmp	r3, #42	; 0x2a
 800242c:	d016      	beq.n	800245c <_vfiprintf_r+0x14c>
 800242e:	2100      	movs	r1, #0
 8002430:	68eb      	ldr	r3, [r5, #12]
 8002432:	9f03      	ldr	r7, [sp, #12]
 8002434:	783a      	ldrb	r2, [r7, #0]
 8002436:	1c78      	adds	r0, r7, #1
 8002438:	3a30      	subs	r2, #48	; 0x30
 800243a:	4684      	mov	ip, r0
 800243c:	2a09      	cmp	r2, #9
 800243e:	d94f      	bls.n	80024e0 <_vfiprintf_r+0x1d0>
 8002440:	2900      	cmp	r1, #0
 8002442:	d111      	bne.n	8002468 <_vfiprintf_r+0x158>
 8002444:	e017      	b.n	8002476 <_vfiprintf_r+0x166>
 8002446:	3701      	adds	r7, #1
 8002448:	e7a9      	b.n	800239e <_vfiprintf_r+0x8e>
 800244a:	4b49      	ldr	r3, [pc, #292]	; (8002570 <_vfiprintf_r+0x260>)
 800244c:	682a      	ldr	r2, [r5, #0]
 800244e:	1ac0      	subs	r0, r0, r3
 8002450:	2301      	movs	r3, #1
 8002452:	4083      	lsls	r3, r0
 8002454:	4313      	orrs	r3, r2
 8002456:	602b      	str	r3, [r5, #0]
 8002458:	9703      	str	r7, [sp, #12]
 800245a:	e7cb      	b.n	80023f4 <_vfiprintf_r+0xe4>
 800245c:	9b07      	ldr	r3, [sp, #28]
 800245e:	1d19      	adds	r1, r3, #4
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	9107      	str	r1, [sp, #28]
 8002464:	2b00      	cmp	r3, #0
 8002466:	db01      	blt.n	800246c <_vfiprintf_r+0x15c>
 8002468:	930b      	str	r3, [sp, #44]	; 0x2c
 800246a:	e004      	b.n	8002476 <_vfiprintf_r+0x166>
 800246c:	425b      	negs	r3, r3
 800246e:	60eb      	str	r3, [r5, #12]
 8002470:	2302      	movs	r3, #2
 8002472:	4313      	orrs	r3, r2
 8002474:	602b      	str	r3, [r5, #0]
 8002476:	783b      	ldrb	r3, [r7, #0]
 8002478:	2b2e      	cmp	r3, #46	; 0x2e
 800247a:	d10a      	bne.n	8002492 <_vfiprintf_r+0x182>
 800247c:	787b      	ldrb	r3, [r7, #1]
 800247e:	2b2a      	cmp	r3, #42	; 0x2a
 8002480:	d137      	bne.n	80024f2 <_vfiprintf_r+0x1e2>
 8002482:	9b07      	ldr	r3, [sp, #28]
 8002484:	3702      	adds	r7, #2
 8002486:	1d1a      	adds	r2, r3, #4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	9207      	str	r2, [sp, #28]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db2d      	blt.n	80024ec <_vfiprintf_r+0x1dc>
 8002490:	9309      	str	r3, [sp, #36]	; 0x24
 8002492:	2203      	movs	r2, #3
 8002494:	7839      	ldrb	r1, [r7, #0]
 8002496:	4837      	ldr	r0, [pc, #220]	; (8002574 <_vfiprintf_r+0x264>)
 8002498:	f000 fd1c 	bl	8002ed4 <memchr>
 800249c:	2800      	cmp	r0, #0
 800249e:	d007      	beq.n	80024b0 <_vfiprintf_r+0x1a0>
 80024a0:	4b34      	ldr	r3, [pc, #208]	; (8002574 <_vfiprintf_r+0x264>)
 80024a2:	682a      	ldr	r2, [r5, #0]
 80024a4:	1ac0      	subs	r0, r0, r3
 80024a6:	2340      	movs	r3, #64	; 0x40
 80024a8:	4083      	lsls	r3, r0
 80024aa:	4313      	orrs	r3, r2
 80024ac:	3701      	adds	r7, #1
 80024ae:	602b      	str	r3, [r5, #0]
 80024b0:	7839      	ldrb	r1, [r7, #0]
 80024b2:	1c7b      	adds	r3, r7, #1
 80024b4:	2206      	movs	r2, #6
 80024b6:	4830      	ldr	r0, [pc, #192]	; (8002578 <_vfiprintf_r+0x268>)
 80024b8:	9303      	str	r3, [sp, #12]
 80024ba:	7629      	strb	r1, [r5, #24]
 80024bc:	f000 fd0a 	bl	8002ed4 <memchr>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d045      	beq.n	8002550 <_vfiprintf_r+0x240>
 80024c4:	4b2d      	ldr	r3, [pc, #180]	; (800257c <_vfiprintf_r+0x26c>)
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d127      	bne.n	800251a <_vfiprintf_r+0x20a>
 80024ca:	2207      	movs	r2, #7
 80024cc:	9b07      	ldr	r3, [sp, #28]
 80024ce:	3307      	adds	r3, #7
 80024d0:	4393      	bics	r3, r2
 80024d2:	3308      	adds	r3, #8
 80024d4:	9307      	str	r3, [sp, #28]
 80024d6:	696b      	ldr	r3, [r5, #20]
 80024d8:	9a04      	ldr	r2, [sp, #16]
 80024da:	189b      	adds	r3, r3, r2
 80024dc:	616b      	str	r3, [r5, #20]
 80024de:	e75d      	b.n	800239c <_vfiprintf_r+0x8c>
 80024e0:	210a      	movs	r1, #10
 80024e2:	434b      	muls	r3, r1
 80024e4:	4667      	mov	r7, ip
 80024e6:	189b      	adds	r3, r3, r2
 80024e8:	3909      	subs	r1, #9
 80024ea:	e7a3      	b.n	8002434 <_vfiprintf_r+0x124>
 80024ec:	2301      	movs	r3, #1
 80024ee:	425b      	negs	r3, r3
 80024f0:	e7ce      	b.n	8002490 <_vfiprintf_r+0x180>
 80024f2:	2300      	movs	r3, #0
 80024f4:	001a      	movs	r2, r3
 80024f6:	3701      	adds	r7, #1
 80024f8:	606b      	str	r3, [r5, #4]
 80024fa:	7839      	ldrb	r1, [r7, #0]
 80024fc:	1c78      	adds	r0, r7, #1
 80024fe:	3930      	subs	r1, #48	; 0x30
 8002500:	4684      	mov	ip, r0
 8002502:	2909      	cmp	r1, #9
 8002504:	d903      	bls.n	800250e <_vfiprintf_r+0x1fe>
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0c3      	beq.n	8002492 <_vfiprintf_r+0x182>
 800250a:	9209      	str	r2, [sp, #36]	; 0x24
 800250c:	e7c1      	b.n	8002492 <_vfiprintf_r+0x182>
 800250e:	230a      	movs	r3, #10
 8002510:	435a      	muls	r2, r3
 8002512:	4667      	mov	r7, ip
 8002514:	1852      	adds	r2, r2, r1
 8002516:	3b09      	subs	r3, #9
 8002518:	e7ef      	b.n	80024fa <_vfiprintf_r+0x1ea>
 800251a:	ab07      	add	r3, sp, #28
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	0022      	movs	r2, r4
 8002520:	0029      	movs	r1, r5
 8002522:	0030      	movs	r0, r6
 8002524:	4b16      	ldr	r3, [pc, #88]	; (8002580 <_vfiprintf_r+0x270>)
 8002526:	e000      	b.n	800252a <_vfiprintf_r+0x21a>
 8002528:	bf00      	nop
 800252a:	9004      	str	r0, [sp, #16]
 800252c:	9b04      	ldr	r3, [sp, #16]
 800252e:	3301      	adds	r3, #1
 8002530:	d1d1      	bne.n	80024d6 <_vfiprintf_r+0x1c6>
 8002532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002534:	07db      	lsls	r3, r3, #31
 8002536:	d405      	bmi.n	8002544 <_vfiprintf_r+0x234>
 8002538:	89a3      	ldrh	r3, [r4, #12]
 800253a:	059b      	lsls	r3, r3, #22
 800253c:	d402      	bmi.n	8002544 <_vfiprintf_r+0x234>
 800253e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002540:	f000 fc5a 	bl	8002df8 <__retarget_lock_release_recursive>
 8002544:	89a3      	ldrh	r3, [r4, #12]
 8002546:	065b      	lsls	r3, r3, #25
 8002548:	d500      	bpl.n	800254c <_vfiprintf_r+0x23c>
 800254a:	e70a      	b.n	8002362 <_vfiprintf_r+0x52>
 800254c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800254e:	e70a      	b.n	8002366 <_vfiprintf_r+0x56>
 8002550:	ab07      	add	r3, sp, #28
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	0022      	movs	r2, r4
 8002556:	0029      	movs	r1, r5
 8002558:	0030      	movs	r0, r6
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <_vfiprintf_r+0x270>)
 800255c:	f000 f882 	bl	8002664 <_printf_i>
 8002560:	e7e3      	b.n	800252a <_vfiprintf_r+0x21a>
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	0800326c 	.word	0x0800326c
 8002568:	0800328c 	.word	0x0800328c
 800256c:	0800324c 	.word	0x0800324c
 8002570:	08003216 	.word	0x08003216
 8002574:	0800321c 	.word	0x0800321c
 8002578:	08003220 	.word	0x08003220
 800257c:	00000000 	.word	0x00000000
 8002580:	080022eb 	.word	0x080022eb

08002584 <_printf_common>:
 8002584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002586:	0015      	movs	r5, r2
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	688a      	ldr	r2, [r1, #8]
 800258c:	690b      	ldr	r3, [r1, #16]
 800258e:	000c      	movs	r4, r1
 8002590:	9000      	str	r0, [sp, #0]
 8002592:	4293      	cmp	r3, r2
 8002594:	da00      	bge.n	8002598 <_printf_common+0x14>
 8002596:	0013      	movs	r3, r2
 8002598:	0022      	movs	r2, r4
 800259a:	602b      	str	r3, [r5, #0]
 800259c:	3243      	adds	r2, #67	; 0x43
 800259e:	7812      	ldrb	r2, [r2, #0]
 80025a0:	2a00      	cmp	r2, #0
 80025a2:	d001      	beq.n	80025a8 <_printf_common+0x24>
 80025a4:	3301      	adds	r3, #1
 80025a6:	602b      	str	r3, [r5, #0]
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	069b      	lsls	r3, r3, #26
 80025ac:	d502      	bpl.n	80025b4 <_printf_common+0x30>
 80025ae:	682b      	ldr	r3, [r5, #0]
 80025b0:	3302      	adds	r3, #2
 80025b2:	602b      	str	r3, [r5, #0]
 80025b4:	6822      	ldr	r2, [r4, #0]
 80025b6:	2306      	movs	r3, #6
 80025b8:	0017      	movs	r7, r2
 80025ba:	401f      	ands	r7, r3
 80025bc:	421a      	tst	r2, r3
 80025be:	d027      	beq.n	8002610 <_printf_common+0x8c>
 80025c0:	0023      	movs	r3, r4
 80025c2:	3343      	adds	r3, #67	; 0x43
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	1e5a      	subs	r2, r3, #1
 80025c8:	4193      	sbcs	r3, r2
 80025ca:	6822      	ldr	r2, [r4, #0]
 80025cc:	0692      	lsls	r2, r2, #26
 80025ce:	d430      	bmi.n	8002632 <_printf_common+0xae>
 80025d0:	0022      	movs	r2, r4
 80025d2:	9901      	ldr	r1, [sp, #4]
 80025d4:	9800      	ldr	r0, [sp, #0]
 80025d6:	9e08      	ldr	r6, [sp, #32]
 80025d8:	3243      	adds	r2, #67	; 0x43
 80025da:	47b0      	blx	r6
 80025dc:	1c43      	adds	r3, r0, #1
 80025de:	d025      	beq.n	800262c <_printf_common+0xa8>
 80025e0:	2306      	movs	r3, #6
 80025e2:	6820      	ldr	r0, [r4, #0]
 80025e4:	682a      	ldr	r2, [r5, #0]
 80025e6:	68e1      	ldr	r1, [r4, #12]
 80025e8:	2500      	movs	r5, #0
 80025ea:	4003      	ands	r3, r0
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d103      	bne.n	80025f8 <_printf_common+0x74>
 80025f0:	1a8d      	subs	r5, r1, r2
 80025f2:	43eb      	mvns	r3, r5
 80025f4:	17db      	asrs	r3, r3, #31
 80025f6:	401d      	ands	r5, r3
 80025f8:	68a3      	ldr	r3, [r4, #8]
 80025fa:	6922      	ldr	r2, [r4, #16]
 80025fc:	4293      	cmp	r3, r2
 80025fe:	dd01      	ble.n	8002604 <_printf_common+0x80>
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	18ed      	adds	r5, r5, r3
 8002604:	2700      	movs	r7, #0
 8002606:	42bd      	cmp	r5, r7
 8002608:	d120      	bne.n	800264c <_printf_common+0xc8>
 800260a:	2000      	movs	r0, #0
 800260c:	e010      	b.n	8002630 <_printf_common+0xac>
 800260e:	3701      	adds	r7, #1
 8002610:	68e3      	ldr	r3, [r4, #12]
 8002612:	682a      	ldr	r2, [r5, #0]
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	42bb      	cmp	r3, r7
 8002618:	ddd2      	ble.n	80025c0 <_printf_common+0x3c>
 800261a:	0022      	movs	r2, r4
 800261c:	2301      	movs	r3, #1
 800261e:	9901      	ldr	r1, [sp, #4]
 8002620:	9800      	ldr	r0, [sp, #0]
 8002622:	9e08      	ldr	r6, [sp, #32]
 8002624:	3219      	adds	r2, #25
 8002626:	47b0      	blx	r6
 8002628:	1c43      	adds	r3, r0, #1
 800262a:	d1f0      	bne.n	800260e <_printf_common+0x8a>
 800262c:	2001      	movs	r0, #1
 800262e:	4240      	negs	r0, r0
 8002630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002632:	2030      	movs	r0, #48	; 0x30
 8002634:	18e1      	adds	r1, r4, r3
 8002636:	3143      	adds	r1, #67	; 0x43
 8002638:	7008      	strb	r0, [r1, #0]
 800263a:	0021      	movs	r1, r4
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	3145      	adds	r1, #69	; 0x45
 8002640:	7809      	ldrb	r1, [r1, #0]
 8002642:	18a2      	adds	r2, r4, r2
 8002644:	3243      	adds	r2, #67	; 0x43
 8002646:	3302      	adds	r3, #2
 8002648:	7011      	strb	r1, [r2, #0]
 800264a:	e7c1      	b.n	80025d0 <_printf_common+0x4c>
 800264c:	0022      	movs	r2, r4
 800264e:	2301      	movs	r3, #1
 8002650:	9901      	ldr	r1, [sp, #4]
 8002652:	9800      	ldr	r0, [sp, #0]
 8002654:	9e08      	ldr	r6, [sp, #32]
 8002656:	321a      	adds	r2, #26
 8002658:	47b0      	blx	r6
 800265a:	1c43      	adds	r3, r0, #1
 800265c:	d0e6      	beq.n	800262c <_printf_common+0xa8>
 800265e:	3701      	adds	r7, #1
 8002660:	e7d1      	b.n	8002606 <_printf_common+0x82>
	...

08002664 <_printf_i>:
 8002664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002666:	b08b      	sub	sp, #44	; 0x2c
 8002668:	9206      	str	r2, [sp, #24]
 800266a:	000a      	movs	r2, r1
 800266c:	3243      	adds	r2, #67	; 0x43
 800266e:	9307      	str	r3, [sp, #28]
 8002670:	9005      	str	r0, [sp, #20]
 8002672:	9204      	str	r2, [sp, #16]
 8002674:	7e0a      	ldrb	r2, [r1, #24]
 8002676:	000c      	movs	r4, r1
 8002678:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800267a:	2a78      	cmp	r2, #120	; 0x78
 800267c:	d807      	bhi.n	800268e <_printf_i+0x2a>
 800267e:	2a62      	cmp	r2, #98	; 0x62
 8002680:	d809      	bhi.n	8002696 <_printf_i+0x32>
 8002682:	2a00      	cmp	r2, #0
 8002684:	d100      	bne.n	8002688 <_printf_i+0x24>
 8002686:	e0c1      	b.n	800280c <_printf_i+0x1a8>
 8002688:	2a58      	cmp	r2, #88	; 0x58
 800268a:	d100      	bne.n	800268e <_printf_i+0x2a>
 800268c:	e08c      	b.n	80027a8 <_printf_i+0x144>
 800268e:	0026      	movs	r6, r4
 8002690:	3642      	adds	r6, #66	; 0x42
 8002692:	7032      	strb	r2, [r6, #0]
 8002694:	e022      	b.n	80026dc <_printf_i+0x78>
 8002696:	0010      	movs	r0, r2
 8002698:	3863      	subs	r0, #99	; 0x63
 800269a:	2815      	cmp	r0, #21
 800269c:	d8f7      	bhi.n	800268e <_printf_i+0x2a>
 800269e:	f7fd fd33 	bl	8000108 <__gnu_thumb1_case_shi>
 80026a2:	0016      	.short	0x0016
 80026a4:	fff6001f 	.word	0xfff6001f
 80026a8:	fff6fff6 	.word	0xfff6fff6
 80026ac:	001ffff6 	.word	0x001ffff6
 80026b0:	fff6fff6 	.word	0xfff6fff6
 80026b4:	fff6fff6 	.word	0xfff6fff6
 80026b8:	003600a8 	.word	0x003600a8
 80026bc:	fff6009a 	.word	0xfff6009a
 80026c0:	00b9fff6 	.word	0x00b9fff6
 80026c4:	0036fff6 	.word	0x0036fff6
 80026c8:	fff6fff6 	.word	0xfff6fff6
 80026cc:	009e      	.short	0x009e
 80026ce:	0026      	movs	r6, r4
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	3642      	adds	r6, #66	; 0x42
 80026d4:	1d11      	adds	r1, r2, #4
 80026d6:	6019      	str	r1, [r3, #0]
 80026d8:	6813      	ldr	r3, [r2, #0]
 80026da:	7033      	strb	r3, [r6, #0]
 80026dc:	2301      	movs	r3, #1
 80026de:	e0a7      	b.n	8002830 <_printf_i+0x1cc>
 80026e0:	6808      	ldr	r0, [r1, #0]
 80026e2:	6819      	ldr	r1, [r3, #0]
 80026e4:	1d0a      	adds	r2, r1, #4
 80026e6:	0605      	lsls	r5, r0, #24
 80026e8:	d50b      	bpl.n	8002702 <_printf_i+0x9e>
 80026ea:	680d      	ldr	r5, [r1, #0]
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	2d00      	cmp	r5, #0
 80026f0:	da03      	bge.n	80026fa <_printf_i+0x96>
 80026f2:	232d      	movs	r3, #45	; 0x2d
 80026f4:	9a04      	ldr	r2, [sp, #16]
 80026f6:	426d      	negs	r5, r5
 80026f8:	7013      	strb	r3, [r2, #0]
 80026fa:	4b61      	ldr	r3, [pc, #388]	; (8002880 <_printf_i+0x21c>)
 80026fc:	270a      	movs	r7, #10
 80026fe:	9303      	str	r3, [sp, #12]
 8002700:	e01b      	b.n	800273a <_printf_i+0xd6>
 8002702:	680d      	ldr	r5, [r1, #0]
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	0641      	lsls	r1, r0, #25
 8002708:	d5f1      	bpl.n	80026ee <_printf_i+0x8a>
 800270a:	b22d      	sxth	r5, r5
 800270c:	e7ef      	b.n	80026ee <_printf_i+0x8a>
 800270e:	680d      	ldr	r5, [r1, #0]
 8002710:	6819      	ldr	r1, [r3, #0]
 8002712:	1d08      	adds	r0, r1, #4
 8002714:	6018      	str	r0, [r3, #0]
 8002716:	062e      	lsls	r6, r5, #24
 8002718:	d501      	bpl.n	800271e <_printf_i+0xba>
 800271a:	680d      	ldr	r5, [r1, #0]
 800271c:	e003      	b.n	8002726 <_printf_i+0xc2>
 800271e:	066d      	lsls	r5, r5, #25
 8002720:	d5fb      	bpl.n	800271a <_printf_i+0xb6>
 8002722:	680d      	ldr	r5, [r1, #0]
 8002724:	b2ad      	uxth	r5, r5
 8002726:	4b56      	ldr	r3, [pc, #344]	; (8002880 <_printf_i+0x21c>)
 8002728:	2708      	movs	r7, #8
 800272a:	9303      	str	r3, [sp, #12]
 800272c:	2a6f      	cmp	r2, #111	; 0x6f
 800272e:	d000      	beq.n	8002732 <_printf_i+0xce>
 8002730:	3702      	adds	r7, #2
 8002732:	0023      	movs	r3, r4
 8002734:	2200      	movs	r2, #0
 8002736:	3343      	adds	r3, #67	; 0x43
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	6863      	ldr	r3, [r4, #4]
 800273c:	60a3      	str	r3, [r4, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	db03      	blt.n	800274a <_printf_i+0xe6>
 8002742:	2204      	movs	r2, #4
 8002744:	6821      	ldr	r1, [r4, #0]
 8002746:	4391      	bics	r1, r2
 8002748:	6021      	str	r1, [r4, #0]
 800274a:	2d00      	cmp	r5, #0
 800274c:	d102      	bne.n	8002754 <_printf_i+0xf0>
 800274e:	9e04      	ldr	r6, [sp, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00c      	beq.n	800276e <_printf_i+0x10a>
 8002754:	9e04      	ldr	r6, [sp, #16]
 8002756:	0028      	movs	r0, r5
 8002758:	0039      	movs	r1, r7
 800275a:	f7fd fd65 	bl	8000228 <__aeabi_uidivmod>
 800275e:	9b03      	ldr	r3, [sp, #12]
 8002760:	3e01      	subs	r6, #1
 8002762:	5c5b      	ldrb	r3, [r3, r1]
 8002764:	7033      	strb	r3, [r6, #0]
 8002766:	002b      	movs	r3, r5
 8002768:	0005      	movs	r5, r0
 800276a:	429f      	cmp	r7, r3
 800276c:	d9f3      	bls.n	8002756 <_printf_i+0xf2>
 800276e:	2f08      	cmp	r7, #8
 8002770:	d109      	bne.n	8002786 <_printf_i+0x122>
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	07db      	lsls	r3, r3, #31
 8002776:	d506      	bpl.n	8002786 <_printf_i+0x122>
 8002778:	6863      	ldr	r3, [r4, #4]
 800277a:	6922      	ldr	r2, [r4, #16]
 800277c:	4293      	cmp	r3, r2
 800277e:	dc02      	bgt.n	8002786 <_printf_i+0x122>
 8002780:	2330      	movs	r3, #48	; 0x30
 8002782:	3e01      	subs	r6, #1
 8002784:	7033      	strb	r3, [r6, #0]
 8002786:	9b04      	ldr	r3, [sp, #16]
 8002788:	1b9b      	subs	r3, r3, r6
 800278a:	6123      	str	r3, [r4, #16]
 800278c:	9b07      	ldr	r3, [sp, #28]
 800278e:	0021      	movs	r1, r4
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	9805      	ldr	r0, [sp, #20]
 8002794:	9b06      	ldr	r3, [sp, #24]
 8002796:	aa09      	add	r2, sp, #36	; 0x24
 8002798:	f7ff fef4 	bl	8002584 <_printf_common>
 800279c:	1c43      	adds	r3, r0, #1
 800279e:	d14c      	bne.n	800283a <_printf_i+0x1d6>
 80027a0:	2001      	movs	r0, #1
 80027a2:	4240      	negs	r0, r0
 80027a4:	b00b      	add	sp, #44	; 0x2c
 80027a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a8:	3145      	adds	r1, #69	; 0x45
 80027aa:	700a      	strb	r2, [r1, #0]
 80027ac:	4a34      	ldr	r2, [pc, #208]	; (8002880 <_printf_i+0x21c>)
 80027ae:	9203      	str	r2, [sp, #12]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	6821      	ldr	r1, [r4, #0]
 80027b4:	ca20      	ldmia	r2!, {r5}
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	0608      	lsls	r0, r1, #24
 80027ba:	d516      	bpl.n	80027ea <_printf_i+0x186>
 80027bc:	07cb      	lsls	r3, r1, #31
 80027be:	d502      	bpl.n	80027c6 <_printf_i+0x162>
 80027c0:	2320      	movs	r3, #32
 80027c2:	4319      	orrs	r1, r3
 80027c4:	6021      	str	r1, [r4, #0]
 80027c6:	2710      	movs	r7, #16
 80027c8:	2d00      	cmp	r5, #0
 80027ca:	d1b2      	bne.n	8002732 <_printf_i+0xce>
 80027cc:	2320      	movs	r3, #32
 80027ce:	6822      	ldr	r2, [r4, #0]
 80027d0:	439a      	bics	r2, r3
 80027d2:	6022      	str	r2, [r4, #0]
 80027d4:	e7ad      	b.n	8002732 <_printf_i+0xce>
 80027d6:	2220      	movs	r2, #32
 80027d8:	6809      	ldr	r1, [r1, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	6022      	str	r2, [r4, #0]
 80027de:	0022      	movs	r2, r4
 80027e0:	2178      	movs	r1, #120	; 0x78
 80027e2:	3245      	adds	r2, #69	; 0x45
 80027e4:	7011      	strb	r1, [r2, #0]
 80027e6:	4a27      	ldr	r2, [pc, #156]	; (8002884 <_printf_i+0x220>)
 80027e8:	e7e1      	b.n	80027ae <_printf_i+0x14a>
 80027ea:	0648      	lsls	r0, r1, #25
 80027ec:	d5e6      	bpl.n	80027bc <_printf_i+0x158>
 80027ee:	b2ad      	uxth	r5, r5
 80027f0:	e7e4      	b.n	80027bc <_printf_i+0x158>
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	680d      	ldr	r5, [r1, #0]
 80027f6:	1d10      	adds	r0, r2, #4
 80027f8:	6949      	ldr	r1, [r1, #20]
 80027fa:	6018      	str	r0, [r3, #0]
 80027fc:	6813      	ldr	r3, [r2, #0]
 80027fe:	062e      	lsls	r6, r5, #24
 8002800:	d501      	bpl.n	8002806 <_printf_i+0x1a2>
 8002802:	6019      	str	r1, [r3, #0]
 8002804:	e002      	b.n	800280c <_printf_i+0x1a8>
 8002806:	066d      	lsls	r5, r5, #25
 8002808:	d5fb      	bpl.n	8002802 <_printf_i+0x19e>
 800280a:	8019      	strh	r1, [r3, #0]
 800280c:	2300      	movs	r3, #0
 800280e:	9e04      	ldr	r6, [sp, #16]
 8002810:	6123      	str	r3, [r4, #16]
 8002812:	e7bb      	b.n	800278c <_printf_i+0x128>
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	1d11      	adds	r1, r2, #4
 8002818:	6019      	str	r1, [r3, #0]
 800281a:	6816      	ldr	r6, [r2, #0]
 800281c:	2100      	movs	r1, #0
 800281e:	0030      	movs	r0, r6
 8002820:	6862      	ldr	r2, [r4, #4]
 8002822:	f000 fb57 	bl	8002ed4 <memchr>
 8002826:	2800      	cmp	r0, #0
 8002828:	d001      	beq.n	800282e <_printf_i+0x1ca>
 800282a:	1b80      	subs	r0, r0, r6
 800282c:	6060      	str	r0, [r4, #4]
 800282e:	6863      	ldr	r3, [r4, #4]
 8002830:	6123      	str	r3, [r4, #16]
 8002832:	2300      	movs	r3, #0
 8002834:	9a04      	ldr	r2, [sp, #16]
 8002836:	7013      	strb	r3, [r2, #0]
 8002838:	e7a8      	b.n	800278c <_printf_i+0x128>
 800283a:	6923      	ldr	r3, [r4, #16]
 800283c:	0032      	movs	r2, r6
 800283e:	9906      	ldr	r1, [sp, #24]
 8002840:	9805      	ldr	r0, [sp, #20]
 8002842:	9d07      	ldr	r5, [sp, #28]
 8002844:	47a8      	blx	r5
 8002846:	1c43      	adds	r3, r0, #1
 8002848:	d0aa      	beq.n	80027a0 <_printf_i+0x13c>
 800284a:	6823      	ldr	r3, [r4, #0]
 800284c:	079b      	lsls	r3, r3, #30
 800284e:	d415      	bmi.n	800287c <_printf_i+0x218>
 8002850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002852:	68e0      	ldr	r0, [r4, #12]
 8002854:	4298      	cmp	r0, r3
 8002856:	daa5      	bge.n	80027a4 <_printf_i+0x140>
 8002858:	0018      	movs	r0, r3
 800285a:	e7a3      	b.n	80027a4 <_printf_i+0x140>
 800285c:	0022      	movs	r2, r4
 800285e:	2301      	movs	r3, #1
 8002860:	9906      	ldr	r1, [sp, #24]
 8002862:	9805      	ldr	r0, [sp, #20]
 8002864:	9e07      	ldr	r6, [sp, #28]
 8002866:	3219      	adds	r2, #25
 8002868:	47b0      	blx	r6
 800286a:	1c43      	adds	r3, r0, #1
 800286c:	d098      	beq.n	80027a0 <_printf_i+0x13c>
 800286e:	3501      	adds	r5, #1
 8002870:	68e3      	ldr	r3, [r4, #12]
 8002872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	42ab      	cmp	r3, r5
 8002878:	dcf0      	bgt.n	800285c <_printf_i+0x1f8>
 800287a:	e7e9      	b.n	8002850 <_printf_i+0x1ec>
 800287c:	2500      	movs	r5, #0
 800287e:	e7f7      	b.n	8002870 <_printf_i+0x20c>
 8002880:	08003227 	.word	0x08003227
 8002884:	08003238 	.word	0x08003238

08002888 <_sbrk_r>:
 8002888:	2300      	movs	r3, #0
 800288a:	b570      	push	{r4, r5, r6, lr}
 800288c:	4d06      	ldr	r5, [pc, #24]	; (80028a8 <_sbrk_r+0x20>)
 800288e:	0004      	movs	r4, r0
 8002890:	0008      	movs	r0, r1
 8002892:	602b      	str	r3, [r5, #0]
 8002894:	f7fe f910 	bl	8000ab8 <_sbrk>
 8002898:	1c43      	adds	r3, r0, #1
 800289a:	d103      	bne.n	80028a4 <_sbrk_r+0x1c>
 800289c:	682b      	ldr	r3, [r5, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d000      	beq.n	80028a4 <_sbrk_r+0x1c>
 80028a2:	6023      	str	r3, [r4, #0]
 80028a4:	bd70      	pop	{r4, r5, r6, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	20000178 	.word	0x20000178

080028ac <__swbuf_r>:
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	0005      	movs	r5, r0
 80028b0:	000e      	movs	r6, r1
 80028b2:	0014      	movs	r4, r2
 80028b4:	2800      	cmp	r0, #0
 80028b6:	d004      	beq.n	80028c2 <__swbuf_r+0x16>
 80028b8:	6983      	ldr	r3, [r0, #24]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <__swbuf_r+0x16>
 80028be:	f000 f9f9 	bl	8002cb4 <__sinit>
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <__swbuf_r+0xa0>)
 80028c4:	429c      	cmp	r4, r3
 80028c6:	d12e      	bne.n	8002926 <__swbuf_r+0x7a>
 80028c8:	686c      	ldr	r4, [r5, #4]
 80028ca:	69a3      	ldr	r3, [r4, #24]
 80028cc:	60a3      	str	r3, [r4, #8]
 80028ce:	89a3      	ldrh	r3, [r4, #12]
 80028d0:	071b      	lsls	r3, r3, #28
 80028d2:	d532      	bpl.n	800293a <__swbuf_r+0x8e>
 80028d4:	6923      	ldr	r3, [r4, #16]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d02f      	beq.n	800293a <__swbuf_r+0x8e>
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	6922      	ldr	r2, [r4, #16]
 80028de:	b2f7      	uxtb	r7, r6
 80028e0:	1a98      	subs	r0, r3, r2
 80028e2:	6963      	ldr	r3, [r4, #20]
 80028e4:	b2f6      	uxtb	r6, r6
 80028e6:	4283      	cmp	r3, r0
 80028e8:	dc05      	bgt.n	80028f6 <__swbuf_r+0x4a>
 80028ea:	0021      	movs	r1, r4
 80028ec:	0028      	movs	r0, r5
 80028ee:	f000 f93f 	bl	8002b70 <_fflush_r>
 80028f2:	2800      	cmp	r0, #0
 80028f4:	d127      	bne.n	8002946 <__swbuf_r+0x9a>
 80028f6:	68a3      	ldr	r3, [r4, #8]
 80028f8:	3001      	adds	r0, #1
 80028fa:	3b01      	subs	r3, #1
 80028fc:	60a3      	str	r3, [r4, #8]
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	6022      	str	r2, [r4, #0]
 8002904:	701f      	strb	r7, [r3, #0]
 8002906:	6963      	ldr	r3, [r4, #20]
 8002908:	4283      	cmp	r3, r0
 800290a:	d004      	beq.n	8002916 <__swbuf_r+0x6a>
 800290c:	89a3      	ldrh	r3, [r4, #12]
 800290e:	07db      	lsls	r3, r3, #31
 8002910:	d507      	bpl.n	8002922 <__swbuf_r+0x76>
 8002912:	2e0a      	cmp	r6, #10
 8002914:	d105      	bne.n	8002922 <__swbuf_r+0x76>
 8002916:	0021      	movs	r1, r4
 8002918:	0028      	movs	r0, r5
 800291a:	f000 f929 	bl	8002b70 <_fflush_r>
 800291e:	2800      	cmp	r0, #0
 8002920:	d111      	bne.n	8002946 <__swbuf_r+0x9a>
 8002922:	0030      	movs	r0, r6
 8002924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <__swbuf_r+0xa4>)
 8002928:	429c      	cmp	r4, r3
 800292a:	d101      	bne.n	8002930 <__swbuf_r+0x84>
 800292c:	68ac      	ldr	r4, [r5, #8]
 800292e:	e7cc      	b.n	80028ca <__swbuf_r+0x1e>
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <__swbuf_r+0xa8>)
 8002932:	429c      	cmp	r4, r3
 8002934:	d1c9      	bne.n	80028ca <__swbuf_r+0x1e>
 8002936:	68ec      	ldr	r4, [r5, #12]
 8002938:	e7c7      	b.n	80028ca <__swbuf_r+0x1e>
 800293a:	0021      	movs	r1, r4
 800293c:	0028      	movs	r0, r5
 800293e:	f000 f80b 	bl	8002958 <__swsetup_r>
 8002942:	2800      	cmp	r0, #0
 8002944:	d0c9      	beq.n	80028da <__swbuf_r+0x2e>
 8002946:	2601      	movs	r6, #1
 8002948:	4276      	negs	r6, r6
 800294a:	e7ea      	b.n	8002922 <__swbuf_r+0x76>
 800294c:	0800326c 	.word	0x0800326c
 8002950:	0800328c 	.word	0x0800328c
 8002954:	0800324c 	.word	0x0800324c

08002958 <__swsetup_r>:
 8002958:	4b37      	ldr	r3, [pc, #220]	; (8002a38 <__swsetup_r+0xe0>)
 800295a:	b570      	push	{r4, r5, r6, lr}
 800295c:	681d      	ldr	r5, [r3, #0]
 800295e:	0006      	movs	r6, r0
 8002960:	000c      	movs	r4, r1
 8002962:	2d00      	cmp	r5, #0
 8002964:	d005      	beq.n	8002972 <__swsetup_r+0x1a>
 8002966:	69ab      	ldr	r3, [r5, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <__swsetup_r+0x1a>
 800296c:	0028      	movs	r0, r5
 800296e:	f000 f9a1 	bl	8002cb4 <__sinit>
 8002972:	4b32      	ldr	r3, [pc, #200]	; (8002a3c <__swsetup_r+0xe4>)
 8002974:	429c      	cmp	r4, r3
 8002976:	d10f      	bne.n	8002998 <__swsetup_r+0x40>
 8002978:	686c      	ldr	r4, [r5, #4]
 800297a:	230c      	movs	r3, #12
 800297c:	5ee2      	ldrsh	r2, [r4, r3]
 800297e:	b293      	uxth	r3, r2
 8002980:	0711      	lsls	r1, r2, #28
 8002982:	d42d      	bmi.n	80029e0 <__swsetup_r+0x88>
 8002984:	06d9      	lsls	r1, r3, #27
 8002986:	d411      	bmi.n	80029ac <__swsetup_r+0x54>
 8002988:	2309      	movs	r3, #9
 800298a:	2001      	movs	r0, #1
 800298c:	6033      	str	r3, [r6, #0]
 800298e:	3337      	adds	r3, #55	; 0x37
 8002990:	4313      	orrs	r3, r2
 8002992:	81a3      	strh	r3, [r4, #12]
 8002994:	4240      	negs	r0, r0
 8002996:	bd70      	pop	{r4, r5, r6, pc}
 8002998:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <__swsetup_r+0xe8>)
 800299a:	429c      	cmp	r4, r3
 800299c:	d101      	bne.n	80029a2 <__swsetup_r+0x4a>
 800299e:	68ac      	ldr	r4, [r5, #8]
 80029a0:	e7eb      	b.n	800297a <__swsetup_r+0x22>
 80029a2:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <__swsetup_r+0xec>)
 80029a4:	429c      	cmp	r4, r3
 80029a6:	d1e8      	bne.n	800297a <__swsetup_r+0x22>
 80029a8:	68ec      	ldr	r4, [r5, #12]
 80029aa:	e7e6      	b.n	800297a <__swsetup_r+0x22>
 80029ac:	075b      	lsls	r3, r3, #29
 80029ae:	d513      	bpl.n	80029d8 <__swsetup_r+0x80>
 80029b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029b2:	2900      	cmp	r1, #0
 80029b4:	d008      	beq.n	80029c8 <__swsetup_r+0x70>
 80029b6:	0023      	movs	r3, r4
 80029b8:	3344      	adds	r3, #68	; 0x44
 80029ba:	4299      	cmp	r1, r3
 80029bc:	d002      	beq.n	80029c4 <__swsetup_r+0x6c>
 80029be:	0030      	movs	r0, r6
 80029c0:	f7ff fb9c 	bl	80020fc <_free_r>
 80029c4:	2300      	movs	r3, #0
 80029c6:	6363      	str	r3, [r4, #52]	; 0x34
 80029c8:	2224      	movs	r2, #36	; 0x24
 80029ca:	89a3      	ldrh	r3, [r4, #12]
 80029cc:	4393      	bics	r3, r2
 80029ce:	81a3      	strh	r3, [r4, #12]
 80029d0:	2300      	movs	r3, #0
 80029d2:	6063      	str	r3, [r4, #4]
 80029d4:	6923      	ldr	r3, [r4, #16]
 80029d6:	6023      	str	r3, [r4, #0]
 80029d8:	2308      	movs	r3, #8
 80029da:	89a2      	ldrh	r2, [r4, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	81a3      	strh	r3, [r4, #12]
 80029e0:	6923      	ldr	r3, [r4, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10b      	bne.n	80029fe <__swsetup_r+0xa6>
 80029e6:	21a0      	movs	r1, #160	; 0xa0
 80029e8:	2280      	movs	r2, #128	; 0x80
 80029ea:	89a3      	ldrh	r3, [r4, #12]
 80029ec:	0089      	lsls	r1, r1, #2
 80029ee:	0092      	lsls	r2, r2, #2
 80029f0:	400b      	ands	r3, r1
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d003      	beq.n	80029fe <__swsetup_r+0xa6>
 80029f6:	0021      	movs	r1, r4
 80029f8:	0030      	movs	r0, r6
 80029fa:	f000 fa27 	bl	8002e4c <__smakebuf_r>
 80029fe:	220c      	movs	r2, #12
 8002a00:	5ea3      	ldrsh	r3, [r4, r2]
 8002a02:	2001      	movs	r0, #1
 8002a04:	001a      	movs	r2, r3
 8002a06:	b299      	uxth	r1, r3
 8002a08:	4002      	ands	r2, r0
 8002a0a:	4203      	tst	r3, r0
 8002a0c:	d00f      	beq.n	8002a2e <__swsetup_r+0xd6>
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60a2      	str	r2, [r4, #8]
 8002a12:	6962      	ldr	r2, [r4, #20]
 8002a14:	4252      	negs	r2, r2
 8002a16:	61a2      	str	r2, [r4, #24]
 8002a18:	2000      	movs	r0, #0
 8002a1a:	6922      	ldr	r2, [r4, #16]
 8002a1c:	4282      	cmp	r2, r0
 8002a1e:	d1ba      	bne.n	8002996 <__swsetup_r+0x3e>
 8002a20:	060a      	lsls	r2, r1, #24
 8002a22:	d5b8      	bpl.n	8002996 <__swsetup_r+0x3e>
 8002a24:	2240      	movs	r2, #64	; 0x40
 8002a26:	4313      	orrs	r3, r2
 8002a28:	81a3      	strh	r3, [r4, #12]
 8002a2a:	3801      	subs	r0, #1
 8002a2c:	e7b3      	b.n	8002996 <__swsetup_r+0x3e>
 8002a2e:	0788      	lsls	r0, r1, #30
 8002a30:	d400      	bmi.n	8002a34 <__swsetup_r+0xdc>
 8002a32:	6962      	ldr	r2, [r4, #20]
 8002a34:	60a2      	str	r2, [r4, #8]
 8002a36:	e7ef      	b.n	8002a18 <__swsetup_r+0xc0>
 8002a38:	20000038 	.word	0x20000038
 8002a3c:	0800326c 	.word	0x0800326c
 8002a40:	0800328c 	.word	0x0800328c
 8002a44:	0800324c 	.word	0x0800324c

08002a48 <abort>:
 8002a48:	2006      	movs	r0, #6
 8002a4a:	b510      	push	{r4, lr}
 8002a4c:	f000 fa88 	bl	8002f60 <raise>
 8002a50:	2001      	movs	r0, #1
 8002a52:	f7fd ffbf 	bl	80009d4 <_exit>
	...

08002a58 <__sflush_r>:
 8002a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a5a:	898b      	ldrh	r3, [r1, #12]
 8002a5c:	0005      	movs	r5, r0
 8002a5e:	000c      	movs	r4, r1
 8002a60:	071a      	lsls	r2, r3, #28
 8002a62:	d45f      	bmi.n	8002b24 <__sflush_r+0xcc>
 8002a64:	684a      	ldr	r2, [r1, #4]
 8002a66:	2a00      	cmp	r2, #0
 8002a68:	dc04      	bgt.n	8002a74 <__sflush_r+0x1c>
 8002a6a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8002a6c:	2a00      	cmp	r2, #0
 8002a6e:	dc01      	bgt.n	8002a74 <__sflush_r+0x1c>
 8002a70:	2000      	movs	r0, #0
 8002a72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002a74:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002a76:	2f00      	cmp	r7, #0
 8002a78:	d0fa      	beq.n	8002a70 <__sflush_r+0x18>
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2180      	movs	r1, #128	; 0x80
 8002a7e:	682e      	ldr	r6, [r5, #0]
 8002a80:	602a      	str	r2, [r5, #0]
 8002a82:	001a      	movs	r2, r3
 8002a84:	0149      	lsls	r1, r1, #5
 8002a86:	400a      	ands	r2, r1
 8002a88:	420b      	tst	r3, r1
 8002a8a:	d034      	beq.n	8002af6 <__sflush_r+0x9e>
 8002a8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a8e:	89a3      	ldrh	r3, [r4, #12]
 8002a90:	075b      	lsls	r3, r3, #29
 8002a92:	d506      	bpl.n	8002aa2 <__sflush_r+0x4a>
 8002a94:	6863      	ldr	r3, [r4, #4]
 8002a96:	1ac0      	subs	r0, r0, r3
 8002a98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <__sflush_r+0x4a>
 8002a9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002aa0:	1ac0      	subs	r0, r0, r3
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	6a21      	ldr	r1, [r4, #32]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	0028      	movs	r0, r5
 8002aaa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002aac:	47b8      	blx	r7
 8002aae:	89a1      	ldrh	r1, [r4, #12]
 8002ab0:	1c43      	adds	r3, r0, #1
 8002ab2:	d106      	bne.n	8002ac2 <__sflush_r+0x6a>
 8002ab4:	682b      	ldr	r3, [r5, #0]
 8002ab6:	2b1d      	cmp	r3, #29
 8002ab8:	d831      	bhi.n	8002b1e <__sflush_r+0xc6>
 8002aba:	4a2c      	ldr	r2, [pc, #176]	; (8002b6c <__sflush_r+0x114>)
 8002abc:	40da      	lsrs	r2, r3
 8002abe:	07d3      	lsls	r3, r2, #31
 8002ac0:	d52d      	bpl.n	8002b1e <__sflush_r+0xc6>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	6063      	str	r3, [r4, #4]
 8002ac6:	6923      	ldr	r3, [r4, #16]
 8002ac8:	6023      	str	r3, [r4, #0]
 8002aca:	04cb      	lsls	r3, r1, #19
 8002acc:	d505      	bpl.n	8002ada <__sflush_r+0x82>
 8002ace:	1c43      	adds	r3, r0, #1
 8002ad0:	d102      	bne.n	8002ad8 <__sflush_r+0x80>
 8002ad2:	682b      	ldr	r3, [r5, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d100      	bne.n	8002ada <__sflush_r+0x82>
 8002ad8:	6560      	str	r0, [r4, #84]	; 0x54
 8002ada:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002adc:	602e      	str	r6, [r5, #0]
 8002ade:	2900      	cmp	r1, #0
 8002ae0:	d0c6      	beq.n	8002a70 <__sflush_r+0x18>
 8002ae2:	0023      	movs	r3, r4
 8002ae4:	3344      	adds	r3, #68	; 0x44
 8002ae6:	4299      	cmp	r1, r3
 8002ae8:	d002      	beq.n	8002af0 <__sflush_r+0x98>
 8002aea:	0028      	movs	r0, r5
 8002aec:	f7ff fb06 	bl	80020fc <_free_r>
 8002af0:	2000      	movs	r0, #0
 8002af2:	6360      	str	r0, [r4, #52]	; 0x34
 8002af4:	e7bd      	b.n	8002a72 <__sflush_r+0x1a>
 8002af6:	2301      	movs	r3, #1
 8002af8:	0028      	movs	r0, r5
 8002afa:	6a21      	ldr	r1, [r4, #32]
 8002afc:	47b8      	blx	r7
 8002afe:	1c43      	adds	r3, r0, #1
 8002b00:	d1c5      	bne.n	8002a8e <__sflush_r+0x36>
 8002b02:	682b      	ldr	r3, [r5, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0c2      	beq.n	8002a8e <__sflush_r+0x36>
 8002b08:	2b1d      	cmp	r3, #29
 8002b0a:	d001      	beq.n	8002b10 <__sflush_r+0xb8>
 8002b0c:	2b16      	cmp	r3, #22
 8002b0e:	d101      	bne.n	8002b14 <__sflush_r+0xbc>
 8002b10:	602e      	str	r6, [r5, #0]
 8002b12:	e7ad      	b.n	8002a70 <__sflush_r+0x18>
 8002b14:	2340      	movs	r3, #64	; 0x40
 8002b16:	89a2      	ldrh	r2, [r4, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	81a3      	strh	r3, [r4, #12]
 8002b1c:	e7a9      	b.n	8002a72 <__sflush_r+0x1a>
 8002b1e:	2340      	movs	r3, #64	; 0x40
 8002b20:	430b      	orrs	r3, r1
 8002b22:	e7fa      	b.n	8002b1a <__sflush_r+0xc2>
 8002b24:	690f      	ldr	r7, [r1, #16]
 8002b26:	2f00      	cmp	r7, #0
 8002b28:	d0a2      	beq.n	8002a70 <__sflush_r+0x18>
 8002b2a:	680a      	ldr	r2, [r1, #0]
 8002b2c:	600f      	str	r7, [r1, #0]
 8002b2e:	1bd2      	subs	r2, r2, r7
 8002b30:	9201      	str	r2, [sp, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	079b      	lsls	r3, r3, #30
 8002b36:	d100      	bne.n	8002b3a <__sflush_r+0xe2>
 8002b38:	694a      	ldr	r2, [r1, #20]
 8002b3a:	60a2      	str	r2, [r4, #8]
 8002b3c:	9b01      	ldr	r3, [sp, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	dc00      	bgt.n	8002b44 <__sflush_r+0xec>
 8002b42:	e795      	b.n	8002a70 <__sflush_r+0x18>
 8002b44:	003a      	movs	r2, r7
 8002b46:	0028      	movs	r0, r5
 8002b48:	9b01      	ldr	r3, [sp, #4]
 8002b4a:	6a21      	ldr	r1, [r4, #32]
 8002b4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b4e:	47b0      	blx	r6
 8002b50:	2800      	cmp	r0, #0
 8002b52:	dc06      	bgt.n	8002b62 <__sflush_r+0x10a>
 8002b54:	2340      	movs	r3, #64	; 0x40
 8002b56:	2001      	movs	r0, #1
 8002b58:	89a2      	ldrh	r2, [r4, #12]
 8002b5a:	4240      	negs	r0, r0
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	81a3      	strh	r3, [r4, #12]
 8002b60:	e787      	b.n	8002a72 <__sflush_r+0x1a>
 8002b62:	9b01      	ldr	r3, [sp, #4]
 8002b64:	183f      	adds	r7, r7, r0
 8002b66:	1a1b      	subs	r3, r3, r0
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	e7e7      	b.n	8002b3c <__sflush_r+0xe4>
 8002b6c:	20400001 	.word	0x20400001

08002b70 <_fflush_r>:
 8002b70:	690b      	ldr	r3, [r1, #16]
 8002b72:	b570      	push	{r4, r5, r6, lr}
 8002b74:	0005      	movs	r5, r0
 8002b76:	000c      	movs	r4, r1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <_fflush_r+0x12>
 8002b7c:	2500      	movs	r5, #0
 8002b7e:	0028      	movs	r0, r5
 8002b80:	bd70      	pop	{r4, r5, r6, pc}
 8002b82:	2800      	cmp	r0, #0
 8002b84:	d004      	beq.n	8002b90 <_fflush_r+0x20>
 8002b86:	6983      	ldr	r3, [r0, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <_fflush_r+0x20>
 8002b8c:	f000 f892 	bl	8002cb4 <__sinit>
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <_fflush_r+0x74>)
 8002b92:	429c      	cmp	r4, r3
 8002b94:	d11b      	bne.n	8002bce <_fflush_r+0x5e>
 8002b96:	686c      	ldr	r4, [r5, #4]
 8002b98:	220c      	movs	r2, #12
 8002b9a:	5ea3      	ldrsh	r3, [r4, r2]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ed      	beq.n	8002b7c <_fflush_r+0xc>
 8002ba0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ba2:	07d2      	lsls	r2, r2, #31
 8002ba4:	d404      	bmi.n	8002bb0 <_fflush_r+0x40>
 8002ba6:	059b      	lsls	r3, r3, #22
 8002ba8:	d402      	bmi.n	8002bb0 <_fflush_r+0x40>
 8002baa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bac:	f000 f923 	bl	8002df6 <__retarget_lock_acquire_recursive>
 8002bb0:	0028      	movs	r0, r5
 8002bb2:	0021      	movs	r1, r4
 8002bb4:	f7ff ff50 	bl	8002a58 <__sflush_r>
 8002bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bba:	0005      	movs	r5, r0
 8002bbc:	07db      	lsls	r3, r3, #31
 8002bbe:	d4de      	bmi.n	8002b7e <_fflush_r+0xe>
 8002bc0:	89a3      	ldrh	r3, [r4, #12]
 8002bc2:	059b      	lsls	r3, r3, #22
 8002bc4:	d4db      	bmi.n	8002b7e <_fflush_r+0xe>
 8002bc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bc8:	f000 f916 	bl	8002df8 <__retarget_lock_release_recursive>
 8002bcc:	e7d7      	b.n	8002b7e <_fflush_r+0xe>
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <_fflush_r+0x78>)
 8002bd0:	429c      	cmp	r4, r3
 8002bd2:	d101      	bne.n	8002bd8 <_fflush_r+0x68>
 8002bd4:	68ac      	ldr	r4, [r5, #8]
 8002bd6:	e7df      	b.n	8002b98 <_fflush_r+0x28>
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <_fflush_r+0x7c>)
 8002bda:	429c      	cmp	r4, r3
 8002bdc:	d1dc      	bne.n	8002b98 <_fflush_r+0x28>
 8002bde:	68ec      	ldr	r4, [r5, #12]
 8002be0:	e7da      	b.n	8002b98 <_fflush_r+0x28>
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	0800326c 	.word	0x0800326c
 8002be8:	0800328c 	.word	0x0800328c
 8002bec:	0800324c 	.word	0x0800324c

08002bf0 <std>:
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	b510      	push	{r4, lr}
 8002bf4:	0004      	movs	r4, r0
 8002bf6:	6003      	str	r3, [r0, #0]
 8002bf8:	6043      	str	r3, [r0, #4]
 8002bfa:	6083      	str	r3, [r0, #8]
 8002bfc:	8181      	strh	r1, [r0, #12]
 8002bfe:	6643      	str	r3, [r0, #100]	; 0x64
 8002c00:	0019      	movs	r1, r3
 8002c02:	81c2      	strh	r2, [r0, #14]
 8002c04:	6103      	str	r3, [r0, #16]
 8002c06:	6143      	str	r3, [r0, #20]
 8002c08:	6183      	str	r3, [r0, #24]
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	305c      	adds	r0, #92	; 0x5c
 8002c0e:	f7ff f9c7 	bl	8001fa0 <memset>
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <std+0x38>)
 8002c14:	6224      	str	r4, [r4, #32]
 8002c16:	6263      	str	r3, [r4, #36]	; 0x24
 8002c18:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <std+0x3c>)
 8002c1a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <std+0x40>)
 8002c1e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <std+0x44>)
 8002c22:	6323      	str	r3, [r4, #48]	; 0x30
 8002c24:	bd10      	pop	{r4, pc}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	08002fa1 	.word	0x08002fa1
 8002c2c:	08002fc9 	.word	0x08002fc9
 8002c30:	08003001 	.word	0x08003001
 8002c34:	0800302d 	.word	0x0800302d

08002c38 <_cleanup_r>:
 8002c38:	b510      	push	{r4, lr}
 8002c3a:	4902      	ldr	r1, [pc, #8]	; (8002c44 <_cleanup_r+0xc>)
 8002c3c:	f000 f8ba 	bl	8002db4 <_fwalk_reent>
 8002c40:	bd10      	pop	{r4, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	08002b71 	.word	0x08002b71

08002c48 <__sfmoreglue>:
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	2568      	movs	r5, #104	; 0x68
 8002c4c:	1e4a      	subs	r2, r1, #1
 8002c4e:	4355      	muls	r5, r2
 8002c50:	000e      	movs	r6, r1
 8002c52:	0029      	movs	r1, r5
 8002c54:	3174      	adds	r1, #116	; 0x74
 8002c56:	f7ff fabd 	bl	80021d4 <_malloc_r>
 8002c5a:	1e04      	subs	r4, r0, #0
 8002c5c:	d008      	beq.n	8002c70 <__sfmoreglue+0x28>
 8002c5e:	2100      	movs	r1, #0
 8002c60:	002a      	movs	r2, r5
 8002c62:	6001      	str	r1, [r0, #0]
 8002c64:	6046      	str	r6, [r0, #4]
 8002c66:	300c      	adds	r0, #12
 8002c68:	60a0      	str	r0, [r4, #8]
 8002c6a:	3268      	adds	r2, #104	; 0x68
 8002c6c:	f7ff f998 	bl	8001fa0 <memset>
 8002c70:	0020      	movs	r0, r4
 8002c72:	bd70      	pop	{r4, r5, r6, pc}

08002c74 <__sfp_lock_acquire>:
 8002c74:	b510      	push	{r4, lr}
 8002c76:	4802      	ldr	r0, [pc, #8]	; (8002c80 <__sfp_lock_acquire+0xc>)
 8002c78:	f000 f8bd 	bl	8002df6 <__retarget_lock_acquire_recursive>
 8002c7c:	bd10      	pop	{r4, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	20000175 	.word	0x20000175

08002c84 <__sfp_lock_release>:
 8002c84:	b510      	push	{r4, lr}
 8002c86:	4802      	ldr	r0, [pc, #8]	; (8002c90 <__sfp_lock_release+0xc>)
 8002c88:	f000 f8b6 	bl	8002df8 <__retarget_lock_release_recursive>
 8002c8c:	bd10      	pop	{r4, pc}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	20000175 	.word	0x20000175

08002c94 <__sinit_lock_acquire>:
 8002c94:	b510      	push	{r4, lr}
 8002c96:	4802      	ldr	r0, [pc, #8]	; (8002ca0 <__sinit_lock_acquire+0xc>)
 8002c98:	f000 f8ad 	bl	8002df6 <__retarget_lock_acquire_recursive>
 8002c9c:	bd10      	pop	{r4, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	20000176 	.word	0x20000176

08002ca4 <__sinit_lock_release>:
 8002ca4:	b510      	push	{r4, lr}
 8002ca6:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <__sinit_lock_release+0xc>)
 8002ca8:	f000 f8a6 	bl	8002df8 <__retarget_lock_release_recursive>
 8002cac:	bd10      	pop	{r4, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	20000176 	.word	0x20000176

08002cb4 <__sinit>:
 8002cb4:	b513      	push	{r0, r1, r4, lr}
 8002cb6:	0004      	movs	r4, r0
 8002cb8:	f7ff ffec 	bl	8002c94 <__sinit_lock_acquire>
 8002cbc:	69a3      	ldr	r3, [r4, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <__sinit+0x14>
 8002cc2:	f7ff ffef 	bl	8002ca4 <__sinit_lock_release>
 8002cc6:	bd13      	pop	{r0, r1, r4, pc}
 8002cc8:	64a3      	str	r3, [r4, #72]	; 0x48
 8002cca:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002ccc:	6523      	str	r3, [r4, #80]	; 0x50
 8002cce:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <__sinit+0x68>)
 8002cd0:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <__sinit+0x6c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	42a3      	cmp	r3, r4
 8002cda:	d101      	bne.n	8002ce0 <__sinit+0x2c>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	61a3      	str	r3, [r4, #24]
 8002ce0:	0020      	movs	r0, r4
 8002ce2:	f000 f81f 	bl	8002d24 <__sfp>
 8002ce6:	6060      	str	r0, [r4, #4]
 8002ce8:	0020      	movs	r0, r4
 8002cea:	f000 f81b 	bl	8002d24 <__sfp>
 8002cee:	60a0      	str	r0, [r4, #8]
 8002cf0:	0020      	movs	r0, r4
 8002cf2:	f000 f817 	bl	8002d24 <__sfp>
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	60e0      	str	r0, [r4, #12]
 8002cfc:	6860      	ldr	r0, [r4, #4]
 8002cfe:	f7ff ff77 	bl	8002bf0 <std>
 8002d02:	2201      	movs	r2, #1
 8002d04:	2109      	movs	r1, #9
 8002d06:	68a0      	ldr	r0, [r4, #8]
 8002d08:	f7ff ff72 	bl	8002bf0 <std>
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	2112      	movs	r1, #18
 8002d10:	68e0      	ldr	r0, [r4, #12]
 8002d12:	f7ff ff6d 	bl	8002bf0 <std>
 8002d16:	2301      	movs	r3, #1
 8002d18:	61a3      	str	r3, [r4, #24]
 8002d1a:	e7d2      	b.n	8002cc2 <__sinit+0xe>
 8002d1c:	08003164 	.word	0x08003164
 8002d20:	08002c39 	.word	0x08002c39

08002d24 <__sfp>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	0007      	movs	r7, r0
 8002d28:	f7ff ffa4 	bl	8002c74 <__sfp_lock_acquire>
 8002d2c:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <__sfp+0x88>)
 8002d2e:	681e      	ldr	r6, [r3, #0]
 8002d30:	69b3      	ldr	r3, [r6, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d102      	bne.n	8002d3c <__sfp+0x18>
 8002d36:	0030      	movs	r0, r6
 8002d38:	f7ff ffbc 	bl	8002cb4 <__sinit>
 8002d3c:	3648      	adds	r6, #72	; 0x48
 8002d3e:	68b4      	ldr	r4, [r6, #8]
 8002d40:	6873      	ldr	r3, [r6, #4]
 8002d42:	3b01      	subs	r3, #1
 8002d44:	d504      	bpl.n	8002d50 <__sfp+0x2c>
 8002d46:	6833      	ldr	r3, [r6, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d022      	beq.n	8002d92 <__sfp+0x6e>
 8002d4c:	6836      	ldr	r6, [r6, #0]
 8002d4e:	e7f6      	b.n	8002d3e <__sfp+0x1a>
 8002d50:	220c      	movs	r2, #12
 8002d52:	5ea5      	ldrsh	r5, [r4, r2]
 8002d54:	2d00      	cmp	r5, #0
 8002d56:	d11a      	bne.n	8002d8e <__sfp+0x6a>
 8002d58:	0020      	movs	r0, r4
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <__sfp+0x8c>)
 8002d5c:	3058      	adds	r0, #88	; 0x58
 8002d5e:	60e3      	str	r3, [r4, #12]
 8002d60:	6665      	str	r5, [r4, #100]	; 0x64
 8002d62:	f000 f847 	bl	8002df4 <__retarget_lock_init_recursive>
 8002d66:	f7ff ff8d 	bl	8002c84 <__sfp_lock_release>
 8002d6a:	0020      	movs	r0, r4
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	0029      	movs	r1, r5
 8002d70:	6025      	str	r5, [r4, #0]
 8002d72:	60a5      	str	r5, [r4, #8]
 8002d74:	6065      	str	r5, [r4, #4]
 8002d76:	6125      	str	r5, [r4, #16]
 8002d78:	6165      	str	r5, [r4, #20]
 8002d7a:	61a5      	str	r5, [r4, #24]
 8002d7c:	305c      	adds	r0, #92	; 0x5c
 8002d7e:	f7ff f90f 	bl	8001fa0 <memset>
 8002d82:	6365      	str	r5, [r4, #52]	; 0x34
 8002d84:	63a5      	str	r5, [r4, #56]	; 0x38
 8002d86:	64a5      	str	r5, [r4, #72]	; 0x48
 8002d88:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002d8a:	0020      	movs	r0, r4
 8002d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d8e:	3468      	adds	r4, #104	; 0x68
 8002d90:	e7d7      	b.n	8002d42 <__sfp+0x1e>
 8002d92:	2104      	movs	r1, #4
 8002d94:	0038      	movs	r0, r7
 8002d96:	f7ff ff57 	bl	8002c48 <__sfmoreglue>
 8002d9a:	1e04      	subs	r4, r0, #0
 8002d9c:	6030      	str	r0, [r6, #0]
 8002d9e:	d1d5      	bne.n	8002d4c <__sfp+0x28>
 8002da0:	f7ff ff70 	bl	8002c84 <__sfp_lock_release>
 8002da4:	230c      	movs	r3, #12
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	e7ef      	b.n	8002d8a <__sfp+0x66>
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	08003164 	.word	0x08003164
 8002db0:	ffff0001 	.word	0xffff0001

08002db4 <_fwalk_reent>:
 8002db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002db6:	0004      	movs	r4, r0
 8002db8:	0006      	movs	r6, r0
 8002dba:	2700      	movs	r7, #0
 8002dbc:	9101      	str	r1, [sp, #4]
 8002dbe:	3448      	adds	r4, #72	; 0x48
 8002dc0:	6863      	ldr	r3, [r4, #4]
 8002dc2:	68a5      	ldr	r5, [r4, #8]
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	9b00      	ldr	r3, [sp, #0]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	d504      	bpl.n	8002dd8 <_fwalk_reent+0x24>
 8002dce:	6824      	ldr	r4, [r4, #0]
 8002dd0:	2c00      	cmp	r4, #0
 8002dd2:	d1f5      	bne.n	8002dc0 <_fwalk_reent+0xc>
 8002dd4:	0038      	movs	r0, r7
 8002dd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002dd8:	89ab      	ldrh	r3, [r5, #12]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d908      	bls.n	8002df0 <_fwalk_reent+0x3c>
 8002dde:	220e      	movs	r2, #14
 8002de0:	5eab      	ldrsh	r3, [r5, r2]
 8002de2:	3301      	adds	r3, #1
 8002de4:	d004      	beq.n	8002df0 <_fwalk_reent+0x3c>
 8002de6:	0029      	movs	r1, r5
 8002de8:	0030      	movs	r0, r6
 8002dea:	9b01      	ldr	r3, [sp, #4]
 8002dec:	4798      	blx	r3
 8002dee:	4307      	orrs	r7, r0
 8002df0:	3568      	adds	r5, #104	; 0x68
 8002df2:	e7e8      	b.n	8002dc6 <_fwalk_reent+0x12>

08002df4 <__retarget_lock_init_recursive>:
 8002df4:	4770      	bx	lr

08002df6 <__retarget_lock_acquire_recursive>:
 8002df6:	4770      	bx	lr

08002df8 <__retarget_lock_release_recursive>:
 8002df8:	4770      	bx	lr
	...

08002dfc <__swhatbuf_r>:
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	000e      	movs	r6, r1
 8002e00:	001d      	movs	r5, r3
 8002e02:	230e      	movs	r3, #14
 8002e04:	5ec9      	ldrsh	r1, [r1, r3]
 8002e06:	0014      	movs	r4, r2
 8002e08:	b096      	sub	sp, #88	; 0x58
 8002e0a:	2900      	cmp	r1, #0
 8002e0c:	da08      	bge.n	8002e20 <__swhatbuf_r+0x24>
 8002e0e:	220c      	movs	r2, #12
 8002e10:	5eb3      	ldrsh	r3, [r6, r2]
 8002e12:	2200      	movs	r2, #0
 8002e14:	602a      	str	r2, [r5, #0]
 8002e16:	061b      	lsls	r3, r3, #24
 8002e18:	d411      	bmi.n	8002e3e <__swhatbuf_r+0x42>
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	e00f      	b.n	8002e40 <__swhatbuf_r+0x44>
 8002e20:	466a      	mov	r2, sp
 8002e22:	f000 f92f 	bl	8003084 <_fstat_r>
 8002e26:	2800      	cmp	r0, #0
 8002e28:	dbf1      	blt.n	8002e0e <__swhatbuf_r+0x12>
 8002e2a:	23f0      	movs	r3, #240	; 0xf0
 8002e2c:	9901      	ldr	r1, [sp, #4]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	4019      	ands	r1, r3
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <__swhatbuf_r+0x4c>)
 8002e34:	18c9      	adds	r1, r1, r3
 8002e36:	424b      	negs	r3, r1
 8002e38:	4159      	adcs	r1, r3
 8002e3a:	6029      	str	r1, [r5, #0]
 8002e3c:	e7ed      	b.n	8002e1a <__swhatbuf_r+0x1e>
 8002e3e:	2340      	movs	r3, #64	; 0x40
 8002e40:	2000      	movs	r0, #0
 8002e42:	6023      	str	r3, [r4, #0]
 8002e44:	b016      	add	sp, #88	; 0x58
 8002e46:	bd70      	pop	{r4, r5, r6, pc}
 8002e48:	ffffe000 	.word	0xffffe000

08002e4c <__smakebuf_r>:
 8002e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e4e:	2602      	movs	r6, #2
 8002e50:	898b      	ldrh	r3, [r1, #12]
 8002e52:	0005      	movs	r5, r0
 8002e54:	000c      	movs	r4, r1
 8002e56:	4233      	tst	r3, r6
 8002e58:	d006      	beq.n	8002e68 <__smakebuf_r+0x1c>
 8002e5a:	0023      	movs	r3, r4
 8002e5c:	3347      	adds	r3, #71	; 0x47
 8002e5e:	6023      	str	r3, [r4, #0]
 8002e60:	6123      	str	r3, [r4, #16]
 8002e62:	2301      	movs	r3, #1
 8002e64:	6163      	str	r3, [r4, #20]
 8002e66:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002e68:	466a      	mov	r2, sp
 8002e6a:	ab01      	add	r3, sp, #4
 8002e6c:	f7ff ffc6 	bl	8002dfc <__swhatbuf_r>
 8002e70:	9900      	ldr	r1, [sp, #0]
 8002e72:	0007      	movs	r7, r0
 8002e74:	0028      	movs	r0, r5
 8002e76:	f7ff f9ad 	bl	80021d4 <_malloc_r>
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	d108      	bne.n	8002e90 <__smakebuf_r+0x44>
 8002e7e:	220c      	movs	r2, #12
 8002e80:	5ea3      	ldrsh	r3, [r4, r2]
 8002e82:	059a      	lsls	r2, r3, #22
 8002e84:	d4ef      	bmi.n	8002e66 <__smakebuf_r+0x1a>
 8002e86:	2203      	movs	r2, #3
 8002e88:	4393      	bics	r3, r2
 8002e8a:	431e      	orrs	r6, r3
 8002e8c:	81a6      	strh	r6, [r4, #12]
 8002e8e:	e7e4      	b.n	8002e5a <__smakebuf_r+0xe>
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <__smakebuf_r+0x84>)
 8002e92:	62ab      	str	r3, [r5, #40]	; 0x28
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	89a2      	ldrh	r2, [r4, #12]
 8002e98:	6020      	str	r0, [r4, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	81a3      	strh	r3, [r4, #12]
 8002e9e:	9b00      	ldr	r3, [sp, #0]
 8002ea0:	6120      	str	r0, [r4, #16]
 8002ea2:	6163      	str	r3, [r4, #20]
 8002ea4:	9b01      	ldr	r3, [sp, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <__smakebuf_r+0x7a>
 8002eaa:	0028      	movs	r0, r5
 8002eac:	230e      	movs	r3, #14
 8002eae:	5ee1      	ldrsh	r1, [r4, r3]
 8002eb0:	f000 f8fa 	bl	80030a8 <_isatty_r>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	d006      	beq.n	8002ec6 <__smakebuf_r+0x7a>
 8002eb8:	2203      	movs	r2, #3
 8002eba:	89a3      	ldrh	r3, [r4, #12]
 8002ebc:	4393      	bics	r3, r2
 8002ebe:	001a      	movs	r2, r3
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	81a3      	strh	r3, [r4, #12]
 8002ec6:	89a0      	ldrh	r0, [r4, #12]
 8002ec8:	4307      	orrs	r7, r0
 8002eca:	81a7      	strh	r7, [r4, #12]
 8002ecc:	e7cb      	b.n	8002e66 <__smakebuf_r+0x1a>
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	08002c39 	.word	0x08002c39

08002ed4 <memchr>:
 8002ed4:	b2c9      	uxtb	r1, r1
 8002ed6:	1882      	adds	r2, r0, r2
 8002ed8:	4290      	cmp	r0, r2
 8002eda:	d101      	bne.n	8002ee0 <memchr+0xc>
 8002edc:	2000      	movs	r0, #0
 8002ede:	4770      	bx	lr
 8002ee0:	7803      	ldrb	r3, [r0, #0]
 8002ee2:	428b      	cmp	r3, r1
 8002ee4:	d0fb      	beq.n	8002ede <memchr+0xa>
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	e7f6      	b.n	8002ed8 <memchr+0x4>
	...

08002eec <__malloc_lock>:
 8002eec:	b510      	push	{r4, lr}
 8002eee:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <__malloc_lock+0xc>)
 8002ef0:	f7ff ff81 	bl	8002df6 <__retarget_lock_acquire_recursive>
 8002ef4:	bd10      	pop	{r4, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	20000174 	.word	0x20000174

08002efc <__malloc_unlock>:
 8002efc:	b510      	push	{r4, lr}
 8002efe:	4802      	ldr	r0, [pc, #8]	; (8002f08 <__malloc_unlock+0xc>)
 8002f00:	f7ff ff7a 	bl	8002df8 <__retarget_lock_release_recursive>
 8002f04:	bd10      	pop	{r4, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	20000174 	.word	0x20000174

08002f0c <_raise_r>:
 8002f0c:	b570      	push	{r4, r5, r6, lr}
 8002f0e:	0004      	movs	r4, r0
 8002f10:	000d      	movs	r5, r1
 8002f12:	291f      	cmp	r1, #31
 8002f14:	d904      	bls.n	8002f20 <_raise_r+0x14>
 8002f16:	2316      	movs	r3, #22
 8002f18:	6003      	str	r3, [r0, #0]
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	4240      	negs	r0, r0
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
 8002f20:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d004      	beq.n	8002f30 <_raise_r+0x24>
 8002f26:	008a      	lsls	r2, r1, #2
 8002f28:	189b      	adds	r3, r3, r2
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2a00      	cmp	r2, #0
 8002f2e:	d108      	bne.n	8002f42 <_raise_r+0x36>
 8002f30:	0020      	movs	r0, r4
 8002f32:	f000 f831 	bl	8002f98 <_getpid_r>
 8002f36:	002a      	movs	r2, r5
 8002f38:	0001      	movs	r1, r0
 8002f3a:	0020      	movs	r0, r4
 8002f3c:	f000 f81a 	bl	8002f74 <_kill_r>
 8002f40:	e7ed      	b.n	8002f1e <_raise_r+0x12>
 8002f42:	2000      	movs	r0, #0
 8002f44:	2a01      	cmp	r2, #1
 8002f46:	d0ea      	beq.n	8002f1e <_raise_r+0x12>
 8002f48:	1c51      	adds	r1, r2, #1
 8002f4a:	d103      	bne.n	8002f54 <_raise_r+0x48>
 8002f4c:	2316      	movs	r3, #22
 8002f4e:	3001      	adds	r0, #1
 8002f50:	6023      	str	r3, [r4, #0]
 8002f52:	e7e4      	b.n	8002f1e <_raise_r+0x12>
 8002f54:	2400      	movs	r4, #0
 8002f56:	0028      	movs	r0, r5
 8002f58:	601c      	str	r4, [r3, #0]
 8002f5a:	4790      	blx	r2
 8002f5c:	0020      	movs	r0, r4
 8002f5e:	e7de      	b.n	8002f1e <_raise_r+0x12>

08002f60 <raise>:
 8002f60:	b510      	push	{r4, lr}
 8002f62:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <raise+0x10>)
 8002f64:	0001      	movs	r1, r0
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	f7ff ffd0 	bl	8002f0c <_raise_r>
 8002f6c:	bd10      	pop	{r4, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	20000038 	.word	0x20000038

08002f74 <_kill_r>:
 8002f74:	2300      	movs	r3, #0
 8002f76:	b570      	push	{r4, r5, r6, lr}
 8002f78:	4d06      	ldr	r5, [pc, #24]	; (8002f94 <_kill_r+0x20>)
 8002f7a:	0004      	movs	r4, r0
 8002f7c:	0008      	movs	r0, r1
 8002f7e:	0011      	movs	r1, r2
 8002f80:	602b      	str	r3, [r5, #0]
 8002f82:	f7fd fd17 	bl	80009b4 <_kill>
 8002f86:	1c43      	adds	r3, r0, #1
 8002f88:	d103      	bne.n	8002f92 <_kill_r+0x1e>
 8002f8a:	682b      	ldr	r3, [r5, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d000      	beq.n	8002f92 <_kill_r+0x1e>
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
 8002f94:	20000178 	.word	0x20000178

08002f98 <_getpid_r>:
 8002f98:	b510      	push	{r4, lr}
 8002f9a:	f7fd fd05 	bl	80009a8 <_getpid>
 8002f9e:	bd10      	pop	{r4, pc}

08002fa0 <__sread>:
 8002fa0:	b570      	push	{r4, r5, r6, lr}
 8002fa2:	000c      	movs	r4, r1
 8002fa4:	250e      	movs	r5, #14
 8002fa6:	5f49      	ldrsh	r1, [r1, r5]
 8002fa8:	f000 f8a4 	bl	80030f4 <_read_r>
 8002fac:	2800      	cmp	r0, #0
 8002fae:	db03      	blt.n	8002fb8 <__sread+0x18>
 8002fb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fb2:	181b      	adds	r3, r3, r0
 8002fb4:	6563      	str	r3, [r4, #84]	; 0x54
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	89a3      	ldrh	r3, [r4, #12]
 8002fba:	4a02      	ldr	r2, [pc, #8]	; (8002fc4 <__sread+0x24>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	81a3      	strh	r3, [r4, #12]
 8002fc0:	e7f9      	b.n	8002fb6 <__sread+0x16>
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	ffffefff 	.word	0xffffefff

08002fc8 <__swrite>:
 8002fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fca:	001f      	movs	r7, r3
 8002fcc:	898b      	ldrh	r3, [r1, #12]
 8002fce:	0005      	movs	r5, r0
 8002fd0:	000c      	movs	r4, r1
 8002fd2:	0016      	movs	r6, r2
 8002fd4:	05db      	lsls	r3, r3, #23
 8002fd6:	d505      	bpl.n	8002fe4 <__swrite+0x1c>
 8002fd8:	230e      	movs	r3, #14
 8002fda:	5ec9      	ldrsh	r1, [r1, r3]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2302      	movs	r3, #2
 8002fe0:	f000 f874 	bl	80030cc <_lseek_r>
 8002fe4:	89a3      	ldrh	r3, [r4, #12]
 8002fe6:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <__swrite+0x34>)
 8002fe8:	0028      	movs	r0, r5
 8002fea:	4013      	ands	r3, r2
 8002fec:	81a3      	strh	r3, [r4, #12]
 8002fee:	0032      	movs	r2, r6
 8002ff0:	230e      	movs	r3, #14
 8002ff2:	5ee1      	ldrsh	r1, [r4, r3]
 8002ff4:	003b      	movs	r3, r7
 8002ff6:	f000 f81f 	bl	8003038 <_write_r>
 8002ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ffc:	ffffefff 	.word	0xffffefff

08003000 <__sseek>:
 8003000:	b570      	push	{r4, r5, r6, lr}
 8003002:	000c      	movs	r4, r1
 8003004:	250e      	movs	r5, #14
 8003006:	5f49      	ldrsh	r1, [r1, r5]
 8003008:	f000 f860 	bl	80030cc <_lseek_r>
 800300c:	89a3      	ldrh	r3, [r4, #12]
 800300e:	1c42      	adds	r2, r0, #1
 8003010:	d103      	bne.n	800301a <__sseek+0x1a>
 8003012:	4a05      	ldr	r2, [pc, #20]	; (8003028 <__sseek+0x28>)
 8003014:	4013      	ands	r3, r2
 8003016:	81a3      	strh	r3, [r4, #12]
 8003018:	bd70      	pop	{r4, r5, r6, pc}
 800301a:	2280      	movs	r2, #128	; 0x80
 800301c:	0152      	lsls	r2, r2, #5
 800301e:	4313      	orrs	r3, r2
 8003020:	81a3      	strh	r3, [r4, #12]
 8003022:	6560      	str	r0, [r4, #84]	; 0x54
 8003024:	e7f8      	b.n	8003018 <__sseek+0x18>
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	ffffefff 	.word	0xffffefff

0800302c <__sclose>:
 800302c:	b510      	push	{r4, lr}
 800302e:	230e      	movs	r3, #14
 8003030:	5ec9      	ldrsh	r1, [r1, r3]
 8003032:	f000 f815 	bl	8003060 <_close_r>
 8003036:	bd10      	pop	{r4, pc}

08003038 <_write_r>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	0004      	movs	r4, r0
 800303c:	0008      	movs	r0, r1
 800303e:	0011      	movs	r1, r2
 8003040:	001a      	movs	r2, r3
 8003042:	2300      	movs	r3, #0
 8003044:	4d05      	ldr	r5, [pc, #20]	; (800305c <_write_r+0x24>)
 8003046:	602b      	str	r3, [r5, #0]
 8003048:	f7fd fced 	bl	8000a26 <_write>
 800304c:	1c43      	adds	r3, r0, #1
 800304e:	d103      	bne.n	8003058 <_write_r+0x20>
 8003050:	682b      	ldr	r3, [r5, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d000      	beq.n	8003058 <_write_r+0x20>
 8003056:	6023      	str	r3, [r4, #0]
 8003058:	bd70      	pop	{r4, r5, r6, pc}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	20000178 	.word	0x20000178

08003060 <_close_r>:
 8003060:	2300      	movs	r3, #0
 8003062:	b570      	push	{r4, r5, r6, lr}
 8003064:	4d06      	ldr	r5, [pc, #24]	; (8003080 <_close_r+0x20>)
 8003066:	0004      	movs	r4, r0
 8003068:	0008      	movs	r0, r1
 800306a:	602b      	str	r3, [r5, #0]
 800306c:	f7fd fcf7 	bl	8000a5e <_close>
 8003070:	1c43      	adds	r3, r0, #1
 8003072:	d103      	bne.n	800307c <_close_r+0x1c>
 8003074:	682b      	ldr	r3, [r5, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d000      	beq.n	800307c <_close_r+0x1c>
 800307a:	6023      	str	r3, [r4, #0]
 800307c:	bd70      	pop	{r4, r5, r6, pc}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	20000178 	.word	0x20000178

08003084 <_fstat_r>:
 8003084:	2300      	movs	r3, #0
 8003086:	b570      	push	{r4, r5, r6, lr}
 8003088:	4d06      	ldr	r5, [pc, #24]	; (80030a4 <_fstat_r+0x20>)
 800308a:	0004      	movs	r4, r0
 800308c:	0008      	movs	r0, r1
 800308e:	0011      	movs	r1, r2
 8003090:	602b      	str	r3, [r5, #0]
 8003092:	f7fd fcee 	bl	8000a72 <_fstat>
 8003096:	1c43      	adds	r3, r0, #1
 8003098:	d103      	bne.n	80030a2 <_fstat_r+0x1e>
 800309a:	682b      	ldr	r3, [r5, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d000      	beq.n	80030a2 <_fstat_r+0x1e>
 80030a0:	6023      	str	r3, [r4, #0]
 80030a2:	bd70      	pop	{r4, r5, r6, pc}
 80030a4:	20000178 	.word	0x20000178

080030a8 <_isatty_r>:
 80030a8:	2300      	movs	r3, #0
 80030aa:	b570      	push	{r4, r5, r6, lr}
 80030ac:	4d06      	ldr	r5, [pc, #24]	; (80030c8 <_isatty_r+0x20>)
 80030ae:	0004      	movs	r4, r0
 80030b0:	0008      	movs	r0, r1
 80030b2:	602b      	str	r3, [r5, #0]
 80030b4:	f7fd fceb 	bl	8000a8e <_isatty>
 80030b8:	1c43      	adds	r3, r0, #1
 80030ba:	d103      	bne.n	80030c4 <_isatty_r+0x1c>
 80030bc:	682b      	ldr	r3, [r5, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d000      	beq.n	80030c4 <_isatty_r+0x1c>
 80030c2:	6023      	str	r3, [r4, #0]
 80030c4:	bd70      	pop	{r4, r5, r6, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	20000178 	.word	0x20000178

080030cc <_lseek_r>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	0004      	movs	r4, r0
 80030d0:	0008      	movs	r0, r1
 80030d2:	0011      	movs	r1, r2
 80030d4:	001a      	movs	r2, r3
 80030d6:	2300      	movs	r3, #0
 80030d8:	4d05      	ldr	r5, [pc, #20]	; (80030f0 <_lseek_r+0x24>)
 80030da:	602b      	str	r3, [r5, #0]
 80030dc:	f7fd fce0 	bl	8000aa0 <_lseek>
 80030e0:	1c43      	adds	r3, r0, #1
 80030e2:	d103      	bne.n	80030ec <_lseek_r+0x20>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d000      	beq.n	80030ec <_lseek_r+0x20>
 80030ea:	6023      	str	r3, [r4, #0]
 80030ec:	bd70      	pop	{r4, r5, r6, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	20000178 	.word	0x20000178

080030f4 <_read_r>:
 80030f4:	b570      	push	{r4, r5, r6, lr}
 80030f6:	0004      	movs	r4, r0
 80030f8:	0008      	movs	r0, r1
 80030fa:	0011      	movs	r1, r2
 80030fc:	001a      	movs	r2, r3
 80030fe:	2300      	movs	r3, #0
 8003100:	4d05      	ldr	r5, [pc, #20]	; (8003118 <_read_r+0x24>)
 8003102:	602b      	str	r3, [r5, #0]
 8003104:	f7fd fc72 	bl	80009ec <_read>
 8003108:	1c43      	adds	r3, r0, #1
 800310a:	d103      	bne.n	8003114 <_read_r+0x20>
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d000      	beq.n	8003114 <_read_r+0x20>
 8003112:	6023      	str	r3, [r4, #0]
 8003114:	bd70      	pop	{r4, r5, r6, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	20000178 	.word	0x20000178

0800311c <_init>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr

08003128 <_fini>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr
